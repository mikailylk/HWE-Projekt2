
JoyStickMenueSteuerung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00000f28  00000fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  008000b0  008000b0  0000100c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b2a  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aee  00000000  00000000  00002d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f6b  00000000  00000000  00003804  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00004770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071c  00000000  00000000  00004b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001508  00000000  00000000  0000526c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3b       	cpi	r26, 0xB0	; 176
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 eb       	ldi	r26, 0xB0	; 176
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3d       	cpi	r26, 0xD9	; 217
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ed 02 	call	0x5da	; 0x5da <main>
  8a:	0c 94 92 07 	jmp	0xf24	; 0xf24 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_JoyADCPort>:
#include <avr/io.h>

void init_JoyADCPort()
{
	// ADC-Kanäle auf Eingang
	DDRA &= ~((1<<ADC_X_KANAL) | (1<<ADC_Y_KANAL) | (1<<ADC_Z_KANAL));
  92:	8a b3       	in	r24, 0x1a	; 26
  94:	88 7f       	andi	r24, 0xF8	; 248
  96:	8a bb       	out	0x1a, r24	; 26
	
	// Switch (Z-Achse), pull-up aktivivieren
	PORTA |= 1<<ADC_Z_KANAL;
  98:	da 9a       	sbi	0x1b, 2	; 27
  9a:	08 95       	ret

0000009c <readADC>:
}

unsigned int readADC(unsigned char Kanal, unsigned int AnzahlMessungen)
{
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
		z[i] = ADCW;
		mittelwert += z[i];
	}
	mittelwert = mittelwert/AnzahlMessungen;
	return mittelwert;
}
  a8:	0d b7       	in	r16, 0x3d	; 61
  aa:	1e b7       	in	r17, 0x3e	; 62
	PORTA |= 1<<ADC_Z_KANAL;
}

unsigned int readADC(unsigned char Kanal, unsigned int AnzahlMessungen)
{
	ADMUX = 0x00;
  ac:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x00;
  ae:	16 b8       	out	0x06, r1	; 6
	
	// ADC-Kanal konfigurieren
	ADMUX |= (1<<REFS0) | (Kanal & 0b00000111); // Referenzspannung Vcc=5V
  b0:	97 b1       	in	r25, 0x07	; 7
  b2:	87 70       	andi	r24, 0x07	; 7
  b4:	90 64       	ori	r25, 0x40	; 64
  b6:	89 2b       	or	r24, r25
  b8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1); // Wahl Takt: fADC = 187.5kHz
  ba:	86 b1       	in	r24, 0x06	; 6
  bc:	86 60       	ori	r24, 0x06	; 6
  be:	86 b9       	out	0x06, r24	; 6
	
	ADCSRA |= 1<<ADEN; // ADC einschalten
  c0:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA &= ~(1<<ADATE); // Einzelwandlung
  c2:	35 98       	cbi	0x06, 5	; 6
	
	SFIOR &= ~((1<<ADTS0)|(1<<ADTS1)|(1<<ADTS2)); // Freilaufbetrieb
  c4:	80 b7       	in	r24, 0x30	; 48
  c6:	8f 71       	andi	r24, 0x1F	; 31
  c8:	80 bf       	out	0x30, r24	; 48

	unsigned int z[AnzahlMessungen];
  ca:	cb 01       	movw	r24, r22
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	2d b7       	in	r18, 0x3d	; 61
  d2:	3e b7       	in	r19, 0x3e	; 62
  d4:	28 1b       	sub	r18, r24
  d6:	39 0b       	sbc	r19, r25
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	3e bf       	out	0x3e, r19	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	2d bf       	out	0x3d, r18	; 61
  e2:	ed b7       	in	r30, 0x3d	; 61
  e4:	fe b7       	in	r31, 0x3e	; 62
  e6:	31 96       	adiw	r30, 0x01	; 1
	
	// erste Wandlung verwerfen (wegen umändern des Kanals)
	ADCSRA |= 1<<ADSC;
  e8:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC)) {;}
  ea:	36 99       	sbic	0x06, 6	; 6
  ec:	fe cf       	rjmp	.-4      	; 0xea <readADC+0x4e>
	
	// Beginn der Auswertung
	unsigned int mittelwert = 0;
	for (unsigned int i = 0; i < AnzahlMessungen; i++)
  ee:	61 15       	cp	r22, r1
  f0:	71 05       	cpc	r23, r1
  f2:	99 f0       	breq	.+38     	; 0x11a <readADC+0x7e>
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= 1<<ADSC; // Einzelwandlung starten
  fc:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1<<ADSC)) {;}
  fe:	36 99       	sbic	0x06, 6	; 6
 100:	fe cf       	rjmp	.-4      	; 0xfe <readADC+0x62>
		z[i] = ADCW;
 102:	44 b1       	in	r20, 0x04	; 4
 104:	55 b1       	in	r21, 0x05	; 5
 106:	41 93       	st	Z+, r20
 108:	51 93       	st	Z+, r21
		mittelwert += z[i];
 10a:	84 0f       	add	r24, r20
 10c:	95 1f       	adc	r25, r21
	ADCSRA |= 1<<ADSC;
	while(ADCSRA & (1<<ADSC)) {;}
	
	// Beginn der Auswertung
	unsigned int mittelwert = 0;
	for (unsigned int i = 0; i < AnzahlMessungen; i++)
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	62 17       	cp	r22, r18
 114:	73 07       	cpc	r23, r19
 116:	91 f7       	brne	.-28     	; 0xfc <readADC+0x60>
 118:	02 c0       	rjmp	.+4      	; 0x11e <readADC+0x82>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
		while(ADCSRA & (1<<ADSC)) {;}
		z[i] = ADCW;
		mittelwert += z[i];
	}
	mittelwert = mittelwert/AnzahlMessungen;
	return mittelwert;
 11e:	0e 94 a0 04 	call	0x940	; 0x940 <__udivmodhi4>
 122:	cb 01       	movw	r24, r22
}
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	1e bf       	out	0x3e, r17	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0d bf       	out	0x3d, r16	; 61
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <JoyPos>:

unsigned char JoyPos(unsigned char GetTasterStatus)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
	unsigned int x;
	unsigned int y;
	unsigned int z;
	
	if (GetTasterStatus == 0x01)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	59 f4       	brne	.+22     	; 0x156 <JoyPos+0x1e>
	{
		z = readADC(ADC_Z_KANAL, MITTEL);
 140:	63 e0       	ldi	r22, 0x03	; 3
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 4e 00 	call	0x9c	; 0x9c <readADC>
		if(z > 900)
		{
			return 0;
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	85 38       	cpi	r24, 0x85	; 133
 14e:	93 40       	sbci	r25, 0x03	; 3
 150:	18 f1       	brcs	.+70     	; 0x198 <JoyPos+0x60>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	21 c0       	rjmp	.+66     	; 0x198 <JoyPos+0x60>
			return 1;// falls gedrückt gehalten --> 1, ansonsten 0
		}
	}
	else
	{
		x = readADC(ADC_X_KANAL,MITTEL);
 156:	63 e0       	ldi	r22, 0x03	; 3
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 4e 00 	call	0x9c	; 0x9c <readADC>
 160:	ec 01       	movw	r28, r24
		y = readADC(ADC_Y_KANAL,MITTEL);
 162:	63 e0       	ldi	r22, 0x03	; 3
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 4e 00 	call	0x9c	; 0x9c <readADC>
		// default (4 ... Links ... Anschlusspinsseite)
		// oben
		if (y<=YSTARTWERT-TRIGGERGRENZE)
 16c:	87 3c       	cpi	r24, 0xC7	; 199
 16e:	91 05       	cpc	r25, r1
 170:	60 f0       	brcs	.+24     	; 0x18a <JoyPos+0x52>
		{
			return 1;
		} // rechts
		else if(x>=XSTARTWERT+TRIGGERGRENZE)
 172:	c5 32       	cpi	r28, 0x25	; 37
 174:	23 e0       	ldi	r18, 0x03	; 3
 176:	d2 07       	cpc	r29, r18
 178:	50 f4       	brcc	.+20     	; 0x18e <JoyPos+0x56>
		{
			return 2;
		} // unten
		else if(y>=YSTARTWERT+TRIGGERGRENZE)
 17a:	8e 31       	cpi	r24, 0x1E	; 30
 17c:	93 40       	sbci	r25, 0x03	; 3
 17e:	48 f4       	brcc	.+18     	; 0x192 <JoyPos+0x5a>
		{
			return 3;
		} //links
		else if(x<=XSTARTWERT-TRIGGERGRENZE)
 180:	ce 3c       	cpi	r28, 0xCE	; 206
 182:	d1 05       	cpc	r29, r1
 184:	40 f0       	brcs	.+16     	; 0x196 <JoyPos+0x5e>
		{
			return 4;
		} // in der Mitte
		else
		{
			return 0;
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	07 c0       	rjmp	.+14     	; 0x198 <JoyPos+0x60>
		y = readADC(ADC_Y_KANAL,MITTEL);
		// default (4 ... Links ... Anschlusspinsseite)
		// oben
		if (y<=YSTARTWERT-TRIGGERGRENZE)
		{
			return 1;
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	05 c0       	rjmp	.+10     	; 0x198 <JoyPos+0x60>
		} // rechts
		else if(x>=XSTARTWERT+TRIGGERGRENZE)
		{
			return 2;
 18e:	22 e0       	ldi	r18, 0x02	; 2
 190:	03 c0       	rjmp	.+6      	; 0x198 <JoyPos+0x60>
		} // unten
		else if(y>=YSTARTWERT+TRIGGERGRENZE)
		{
			return 3;
 192:	23 e0       	ldi	r18, 0x03	; 3
 194:	01 c0       	rjmp	.+2      	; 0x198 <JoyPos+0x60>
		} //links
		else if(x<=XSTARTWERT-TRIGGERGRENZE)
		{
			return 4;
 196:	24 e0       	ldi	r18, 0x04	; 4
		else
		{
			return 0;
		}
	}
}
 198:	82 2f       	mov	r24, r18
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <refreshDisplay>:
unsigned char countSpalte = 0;	// ist der Cursor auf der Auswahl oder den Zuständen
// ***********************ENDE: Public Variablen (NICHT VERÄNDERN)**********************

// Display je nach Auswahlseite und Zustand aktualisieren
void refreshDisplay()
{
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
	display_Clear();
 1ac:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <display_Clear>
	for (unsigned int j = 0; j < anzahlZeilen[countAuswahl]; j++)
 1b0:	e0 91 b7 00 	lds	r30, 0x00B7	; 0x8000b7 <countAuswahl>
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	e4 55       	subi	r30, 0x54	; 84
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	80 81       	ld	r24, Z
 1bc:	88 23       	and	r24, r24
 1be:	09 f4       	brne	.+2      	; 0x1c2 <refreshDisplay+0x22>
 1c0:	7d c0       	rjmp	.+250    	; 0x2bc <refreshDisplay+0x11c>
 1c2:	e1 2c       	mov	r14, r1
 1c4:	f1 2c       	mov	r15, r1
		{
			printf("%s*%3u",listNames[countAuswahl][j], listZustaende[countAuswahl][j]);
		}
		else
		{
			printf("%s %3u",listNames[countAuswahl][j], listZustaende[countAuswahl][j]);
 1c6:	cd e9       	ldi	r28, 0x9D	; 157
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
	for (unsigned int j = 0; j < anzahlZeilen[countAuswahl]; j++)
	{
		display_Pos(0, j);
		if(j == countZeile && countSpalte == 1)
		{
			printf("%s*%3u",listNames[countAuswahl][j], listZustaende[countAuswahl][j]);
 1ca:	06 e9       	ldi	r16, 0x96	; 150
 1cc:	10 e0       	ldi	r17, 0x00	; 0
void refreshDisplay()
{
	display_Clear();
	for (unsigned int j = 0; j < anzahlZeilen[countAuswahl]; j++)
	{
		display_Pos(0, j);
 1ce:	6e 2d       	mov	r22, r14
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 1c 04 	call	0x838	; 0x838 <display_Pos>
		if(j == countZeile && countSpalte == 1)
 1d6:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <countZeile>
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	8e 15       	cp	r24, r14
 1de:	9f 05       	cpc	r25, r15
 1e0:	91 f5       	brne	.+100    	; 0x246 <refreshDisplay+0xa6>
 1e2:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <countSpalte>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	71 f5       	brne	.+92     	; 0x246 <refreshDisplay+0xa6>
		{
			printf("%s*%3u",listNames[countAuswahl][j], listZustaende[countAuswahl][j]);
 1ea:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <countAuswahl>
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	a9 01       	movw	r20, r18
 1f2:	44 0f       	add	r20, r20
 1f4:	55 1f       	adc	r21, r21
 1f6:	fa 01       	movw	r30, r20
 1f8:	e8 54       	subi	r30, 0x48	; 72
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	ee 0d       	add	r30, r14
 1fe:	ff 1d       	adc	r31, r15
 200:	80 81       	ld	r24, Z
 202:	1f 92       	push	r1
 204:	8f 93       	push	r24
 206:	c7 01       	movw	r24, r14
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	8e 0d       	add	r24, r14
 212:	9f 1d       	adc	r25, r15
 214:	22 0f       	add	r18, r18
 216:	33 1f       	adc	r19, r19
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	24 0f       	add	r18, r20
 222:	35 1f       	adc	r19, r21
 224:	82 0f       	add	r24, r18
 226:	93 1f       	adc	r25, r19
 228:	80 5a       	subi	r24, 0xA0	; 160
 22a:	9f 4f       	sbci	r25, 0xFF	; 255
 22c:	9f 93       	push	r25
 22e:	8f 93       	push	r24
 230:	1f 93       	push	r17
 232:	0f 93       	push	r16
 234:	0e 94 b4 04 	call	0x968	; 0x968 <printf>
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	2d c0       	rjmp	.+90     	; 0x2a0 <refreshDisplay+0x100>
		}
		else
		{
			printf("%s %3u",listNames[countAuswahl][j], listZustaende[countAuswahl][j]);
 246:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <countAuswahl>
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	a9 01       	movw	r20, r18
 24e:	44 0f       	add	r20, r20
 250:	55 1f       	adc	r21, r21
 252:	fa 01       	movw	r30, r20
 254:	e8 54       	subi	r30, 0x48	; 72
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	ee 0d       	add	r30, r14
 25a:	ff 1d       	adc	r31, r15
 25c:	80 81       	ld	r24, Z
 25e:	1f 92       	push	r1
 260:	8f 93       	push	r24
 262:	c7 01       	movw	r24, r14
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	8e 0d       	add	r24, r14
 26e:	9f 1d       	adc	r25, r15
 270:	22 0f       	add	r18, r18
 272:	33 1f       	adc	r19, r19
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	24 0f       	add	r18, r20
 27e:	35 1f       	adc	r19, r21
 280:	82 0f       	add	r24, r18
 282:	93 1f       	adc	r25, r19
 284:	80 5a       	subi	r24, 0xA0	; 160
 286:	9f 4f       	sbci	r25, 0xFF	; 255
 288:	9f 93       	push	r25
 28a:	8f 93       	push	r24
 28c:	df 93       	push	r29
 28e:	cf 93       	push	r28
 290:	0e 94 b4 04 	call	0x968	; 0x968 <printf>
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0

// Display je nach Auswahlseite und Zustand aktualisieren
void refreshDisplay()
{
	display_Clear();
	for (unsigned int j = 0; j < anzahlZeilen[countAuswahl]; j++)
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	e8 1a       	sub	r14, r24
 2a4:	f8 0a       	sbc	r15, r24
 2a6:	e0 91 b7 00 	lds	r30, 0x00B7	; 0x8000b7 <countAuswahl>
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	e4 55       	subi	r30, 0x54	; 84
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	80 81       	ld	r24, Z
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	e8 16       	cp	r14, r24
 2b6:	f9 06       	cpc	r15, r25
 2b8:	08 f4       	brcc	.+2      	; 0x2bc <refreshDisplay+0x11c>
 2ba:	89 cf       	rjmp	.-238    	; 0x1ce <refreshDisplay+0x2e>
		else
		{
			printf("%s %3u",listNames[countAuswahl][j], listZustaende[countAuswahl][j]);
		}
	}
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	08 95       	ret

000002ca <changeMenu>:

void changeMenu()
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
	static unsigned char MovedDown = 0;
	static unsigned char JoyStickPressed = 0;
	
	unsigned char JoyZPos = 0; // nichtgedrückt (default)
	// Joystick gedrückt abfragen
	JoyZPos = JoyPos(0x01); // Ist Joystick gedrückt oder losgelassen?
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 9c 00 	call	0x138	; 0x138 <JoyPos>
 2d4:	d8 2f       	mov	r29, r24
	
	// allgemeine JoyStickPosition ermitteln (1 = Oben, ...)
	unsigned char joyStickPosition = 0;
	joyStickPosition = JoyPos(0x00);
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 9c 00 	call	0x138	; 0x138 <JoyPos>
 2dc:	c8 2f       	mov	r28, r24
	
	// Bei AuswahlMenü nach rechts o. links navigieren, wenn Joystick nicht gedrückt ist bzw. gedrückt wurde
	if(JoyZPos != 1 && JoyStickPressed == 0 && countSpalte == 0)
 2de:	d1 30       	cpi	r29, 0x01	; 1
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <changeMenu+0x1a>
 2e2:	11 c1       	rjmp	.+546    	; 0x506 <__stack+0xa7>
 2e4:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <JoyStickPressed.1848>
 2e8:	81 11       	cpse	r24, r1
 2ea:	35 c0       	rjmp	.+106    	; 0x356 <changeMenu+0x8c>
 2ec:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <countSpalte>
 2f0:	81 11       	cpse	r24, r1
 2f2:	e9 c0       	rjmp	.+466    	; 0x4c6 <__stack+0x67>
	{
		// Prüfen ob schon 1 mal nach rechts und links nicht navigiert wurde
		if(MovedRight != 1 && MovedLeft != 1)
 2f4:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <MovedRight.1845>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	e9 f0       	breq	.+58     	; 0x336 <changeMenu+0x6c>
 2fc:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <MovedLeft.1844>
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	c9 f0       	breq	.+50     	; 0x336 <changeMenu+0x6c>
		{
			if(joyStickPosition == RECHTS && countAuswahl < ANZAHL_AUSWAHL-1)
 304:	c2 30       	cpi	r28, 0x02	; 2
 306:	09 f0       	breq	.+2      	; 0x30a <changeMenu+0x40>
 308:	da c0       	rjmp	.+436    	; 0x4be <__stack+0x5f>
 30a:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <countAuswahl>
 30e:	83 30       	cpi	r24, 0x03	; 3
 310:	c0 f4       	brcc	.+48     	; 0x342 <changeMenu+0x78>
			{
				MovedRight = 1;
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <MovedRight.1845>
				countAuswahl ++;
 318:	8f 5f       	subi	r24, 0xFF	; 255
 31a:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <countAuswahl>
 31e:	11 c0       	rjmp	.+34     	; 0x342 <changeMenu+0x78>
			}
			else if (joyStickPosition == LINKS && countAuswahl > 0)
 320:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <countAuswahl>
 324:	88 23       	and	r24, r24
 326:	49 f0       	breq	.+18     	; 0x33a <changeMenu+0x70>
			{
				MovedLeft = 1;
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <MovedLeft.1844>
				countAuswahl --;
 32e:	81 50       	subi	r24, 0x01	; 1
 330:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <countAuswahl>
 334:	02 c0       	rjmp	.+4      	; 0x33a <changeMenu+0x70>
			}
		}
		if(joyStickPosition != RECHTS)
 336:	c2 30       	cpi	r28, 0x02	; 2
 338:	21 f0       	breq	.+8      	; 0x342 <changeMenu+0x78>
		{
			MovedRight = 0;
 33a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <MovedRight.1845>
		}
		if(joyStickPosition != LINKS)
 33e:	c4 30       	cpi	r28, 0x04	; 4
 340:	11 f0       	breq	.+4      	; 0x346 <changeMenu+0x7c>
		{
			MovedLeft = 0;
 342:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <MovedLeft.1844>
		}
		refreshDisplay();
 346:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <refreshDisplay>
	}
	
	// Wird JoyStick gedrückt?
	if(JoyZPos != 0 && JoyStickPressed == 0)
 34a:	dd 23       	and	r29, r29
 34c:	21 f0       	breq	.+8      	; 0x356 <changeMenu+0x8c>
 34e:	d1 c0       	rjmp	.+418    	; 0x4f2 <__stack+0x93>
	{
		JoyStickPressed = 1; // JoyStickStatus auf "wurde gedrückt" ändern
	}
	
	// JoyStick wurde gedrückt und losgelassen --> Als gedrückt Werten (Anzahl der Gedrückten aufzählen)
	if(JoyZPos != 1 && JoyStickPressed == 1)
 350:	d1 30       	cpi	r29, 0x01	; 1
 352:	09 f4       	brne	.+2      	; 0x356 <changeMenu+0x8c>
 354:	ea c0       	rjmp	.+468    	; 0x52a <__stack+0xcb>
 356:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <JoyStickPressed.1848>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	09 f0       	breq	.+2      	; 0x360 <changeMenu+0x96>
 35e:	b7 c0       	rjmp	.+366    	; 0x4ce <__stack+0x6f>
	{
		if(countSpalte < 1)
 360:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <countSpalte>
 364:	81 11       	cpse	r24, r1
 366:	08 c0       	rjmp	.+16     	; 0x378 <changeMenu+0xae>
		{
			countSpalte++; // 1. mal gedrückt
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <countSpalte>
			MovedRight = 0;
 36e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <MovedRight.1845>
			MovedLeft = 0;
 372:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <MovedLeft.1844>
 376:	0c c0       	rjmp	.+24     	; 0x390 <changeMenu+0xc6>
		}
		else // mehr als 1 oder zum 2. mal gedrückt --> countSpalte (Anzahl Drückungen = 0)
		{
			// zurück zur Auswahl springen
			countSpalte = 0;
 378:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <countSpalte>
			countZeile = 0;
 37c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <countZeile>
			
			// Alle andere möglichen PositionenStatusabfragen rücksetzen (Fehler zu vermeiden)
			MovedRight = 0;
 380:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <MovedRight.1845>
			MovedLeft = 0;
 384:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <MovedLeft.1844>
			MovedUp = 0;
 388:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <MovedUp.1846>
			MovedDown = 0;
 38c:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__data_end>
		}
		JoyStickPressed = 0; // JoyStickStatus auf "nicht gedrückt" ändern
 390:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <JoyStickPressed.1848>
 394:	9c c0       	rjmp	.+312    	; 0x4ce <__stack+0x6f>

	// JoyStick wurde zum 1. Mal gedrückt bzw. eine Auswahl wurde getroffen
	if (countSpalte == 1 && JoyZPos != 1)
	{
		// Auf welcher Zeile befindet sich der Cursor ?
		if(MovedUp != 1 && MovedDown != 1)
 396:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <MovedUp.1846>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	41 f1       	breq	.+80     	; 0x3ee <changeMenu+0x124>
 39e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_end>
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	21 f1       	breq	.+72     	; 0x3ee <changeMenu+0x124>
		{
			if(joyStickPosition == OBEN && countZeile > 0)
 3a6:	c1 30       	cpi	r28, 0x01	; 1
 3a8:	09 f0       	breq	.+2      	; 0x3ac <changeMenu+0xe2>
 3aa:	96 c0       	rjmp	.+300    	; 0x4d8 <__stack+0x79>
 3ac:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <countZeile>
 3b0:	88 23       	and	r24, r24
 3b2:	29 f1       	breq	.+74     	; 0x3fe <changeMenu+0x134>
			{
				MovedUp = 1;
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <MovedUp.1846>
				countZeile --;
 3ba:	81 50       	subi	r24, 0x01	; 1
 3bc:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <countZeile>
 3c0:	1e c0       	rjmp	.+60     	; 0x3fe <changeMenu+0x134>
			}
			else if (joyStickPosition == UNTEN && countZeile < anzahlZeilen[countAuswahl]-1)
 3c2:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <countZeile>
 3c6:	42 2f       	mov	r20, r18
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	e0 91 b7 00 	lds	r30, 0x00B7	; 0x8000b7 <countAuswahl>
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	e4 55       	subi	r30, 0x54	; 84
 3d2:	ff 4f       	sbci	r31, 0xFF	; 255
 3d4:	80 81       	ld	r24, Z
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	48 17       	cp	r20, r24
 3dc:	59 07       	cpc	r21, r25
 3de:	54 f4       	brge	.+20     	; 0x3f4 <changeMenu+0x12a>
			{
				MovedDown = 1;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_end>
				countZeile ++;
 3e6:	2f 5f       	subi	r18, 0xFF	; 255
 3e8:	20 93 b6 00 	sts	0x00B6, r18	; 0x8000b6 <countZeile>
 3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <changeMenu+0x12a>
			}
		}
		if(joyStickPosition != OBEN)
 3ee:	c1 30       	cpi	r28, 0x01	; 1
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <changeMenu+0x12a>
 3f2:	8e c0       	rjmp	.+284    	; 0x510 <__stack+0xb1>
		{
			MovedUp = 0;
 3f4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <MovedUp.1846>
		}
		if(joyStickPosition != UNTEN)
 3f8:	c3 30       	cpi	r28, 0x03	; 3
 3fa:	09 f4       	brne	.+2      	; 0x3fe <changeMenu+0x134>
 3fc:	71 c0       	rjmp	.+226    	; 0x4e0 <__stack+0x81>
		{
			MovedDown = 0;
 3fe:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__data_end>
		}
		
		if(MovedRight != 1 && MovedLeft != 1)
 402:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <MovedRight.1845>
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	4e c0       	rjmp	.+156    	; 0x4a8 <__stack+0x49>
 40c:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <MovedLeft.1844>
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	09 f4       	brne	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 414:	49 c0       	rjmp	.+146    	; 0x4a8 <__stack+0x49>
		{
			if(joyStickPosition == RECHTS && listZustaende[countAuswahl][countZeile] < listAnzahlZustaende[countAuswahl][countZeile] - 1)
 416:	c2 30       	cpi	r28, 0x02	; 2
 418:	09 f0       	breq	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	67 c0       	rjmp	.+206    	; 0x4ea <__stack+0x8b>
 41c:	40 91 b7 00 	lds	r20, 0x00B7	; 0x8000b7 <countAuswahl>
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <countZeile>
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	ca 01       	movw	r24, r20
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	fc 01       	movw	r30, r24
 430:	e8 54       	subi	r30, 0x48	; 72
 432:	ff 4f       	sbci	r31, 0xFF	; 255
 434:	e2 0f       	add	r30, r18
 436:	f3 1f       	adc	r31, r19
 438:	60 81       	ld	r22, Z
 43a:	a6 2f       	mov	r26, r22
 43c:	b0 e0       	ldi	r27, 0x00	; 0
 43e:	8c 55       	subi	r24, 0x5C	; 92
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	fc 01       	movw	r30, r24
 444:	e2 0f       	add	r30, r18
 446:	f3 1f       	adc	r31, r19
 448:	80 81       	ld	r24, Z
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	a8 17       	cp	r26, r24
 450:	b9 07       	cpc	r27, r25
 452:	84 f5       	brge	.+96     	; 0x4b4 <__stack+0x55>
			{
				MovedRight = 1;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <MovedRight.1845>
				listZustaende[countAuswahl][countZeile]++;
 45a:	44 0f       	add	r20, r20
 45c:	55 1f       	adc	r21, r21
 45e:	48 54       	subi	r20, 0x48	; 72
 460:	5f 4f       	sbci	r21, 0xFF	; 255
 462:	fa 01       	movw	r30, r20
 464:	e2 0f       	add	r30, r18
 466:	f3 1f       	adc	r31, r19
 468:	6f 5f       	subi	r22, 0xFF	; 255
 46a:	60 83       	st	Z, r22
 46c:	23 c0       	rjmp	.+70     	; 0x4b4 <__stack+0x55>
				
			}
			else if (joyStickPosition == LINKS && listZustaende[countAuswahl][countZeile] > 0)
 46e:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <countAuswahl>
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <countZeile>
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	fc 01       	movw	r30, r24
 47c:	ee 0f       	add	r30, r30
 47e:	ff 1f       	adc	r31, r31
 480:	e8 54       	subi	r30, 0x48	; 72
 482:	ff 4f       	sbci	r31, 0xFF	; 255
 484:	e2 0f       	add	r30, r18
 486:	f3 1f       	adc	r31, r19
 488:	40 81       	ld	r20, Z
 48a:	44 23       	and	r20, r20
 48c:	79 f0       	breq	.+30     	; 0x4ac <__stack+0x4d>
			{
				MovedLeft = 1;
 48e:	51 e0       	ldi	r21, 0x01	; 1
 490:	50 93 b2 00 	sts	0x00B2, r21	; 0x8000b2 <MovedLeft.1844>
				listZustaende[countAuswahl][countZeile]--;
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	88 54       	subi	r24, 0x48	; 72
 49a:	9f 4f       	sbci	r25, 0xFF	; 255
 49c:	fc 01       	movw	r30, r24
 49e:	e2 0f       	add	r30, r18
 4a0:	f3 1f       	adc	r31, r19
 4a2:	41 50       	subi	r20, 0x01	; 1
 4a4:	40 83       	st	Z, r20
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__stack+0x4d>
			}
		}
		if(joyStickPosition != RECHTS)
 4a8:	c2 30       	cpi	r28, 0x02	; 2
 4aa:	21 f0       	breq	.+8      	; 0x4b4 <__stack+0x55>
		{
			MovedRight = 0;
 4ac:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <MovedRight.1845>
		}
		if(joyStickPosition != LINKS)
 4b0:	c4 30       	cpi	r28, 0x04	; 4
 4b2:	11 f0       	breq	.+4      	; 0x4b8 <__stack+0x59>
		{
			MovedLeft = 0;
 4b4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <MovedLeft.1844>
		}
		refreshDisplay();
 4b8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <refreshDisplay>
	}
}
 4bc:	36 c0       	rjmp	.+108    	; 0x52a <__stack+0xcb>
			if(joyStickPosition == RECHTS && countAuswahl < ANZAHL_AUSWAHL-1)
			{
				MovedRight = 1;
				countAuswahl ++;
			}
			else if (joyStickPosition == LINKS && countAuswahl > 0)
 4be:	c4 30       	cpi	r28, 0x04	; 4
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__stack+0x65>
 4c2:	3b cf       	rjmp	.-394    	; 0x33a <changeMenu+0x70>
 4c4:	2d cf       	rjmp	.-422    	; 0x320 <changeMenu+0x56>
		}
		refreshDisplay();
	}
	
	// Wird JoyStick gedrückt?
	if(JoyZPos != 0 && JoyStickPressed == 0)
 4c6:	dd 23       	and	r29, r29
 4c8:	09 f4       	brne	.+2      	; 0x4cc <__stack+0x6d>
 4ca:	45 cf       	rjmp	.-374    	; 0x356 <changeMenu+0x8c>
 4cc:	49 cf       	rjmp	.-366    	; 0x360 <changeMenu+0x96>
		}
		JoyStickPressed = 0; // JoyStickStatus auf "nicht gedrückt" ändern
	}

	// JoyStick wurde zum 1. Mal gedrückt bzw. eine Auswahl wurde getroffen
	if (countSpalte == 1 && JoyZPos != 1)
 4ce:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <countSpalte>
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	51 f5       	brne	.+84     	; 0x52a <__stack+0xcb>
 4d6:	5f cf       	rjmp	.-322    	; 0x396 <changeMenu+0xcc>
			if(joyStickPosition == OBEN && countZeile > 0)
			{
				MovedUp = 1;
				countZeile --;
			}
			else if (joyStickPosition == UNTEN && countZeile < anzahlZeilen[countAuswahl]-1)
 4d8:	c3 30       	cpi	r28, 0x03	; 3
 4da:	09 f0       	breq	.+2      	; 0x4de <__stack+0x7f>
 4dc:	8b cf       	rjmp	.-234    	; 0x3f4 <changeMenu+0x12a>
 4de:	71 cf       	rjmp	.-286    	; 0x3c2 <changeMenu+0xf8>
		if(joyStickPosition != UNTEN)
		{
			MovedDown = 0;
		}
		
		if(MovedRight != 1 && MovedLeft != 1)
 4e0:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <MovedRight.1845>
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	e1 f4       	brne	.+56     	; 0x520 <__stack+0xc1>
 4e8:	e1 cf       	rjmp	.-62     	; 0x4ac <__stack+0x4d>
			{
				MovedRight = 1;
				listZustaende[countAuswahl][countZeile]++;
				
			}
			else if (joyStickPosition == LINKS && listZustaende[countAuswahl][countZeile] > 0)
 4ea:	c4 30       	cpi	r28, 0x04	; 4
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <__stack+0x91>
 4ee:	bf cf       	rjmp	.-130    	; 0x46e <__stack+0xf>
 4f0:	dd cf       	rjmp	.-70     	; 0x4ac <__stack+0x4d>
		}
		refreshDisplay();
	}
	
	// Wird JoyStick gedrückt?
	if(JoyZPos != 0 && JoyStickPressed == 0)
 4f2:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <JoyStickPressed.1848>
 4f6:	88 23       	and	r24, r24
 4f8:	09 f4       	brne	.+2      	; 0x4fc <__stack+0x9d>
 4fa:	32 cf       	rjmp	.-412    	; 0x360 <changeMenu+0x96>
 4fc:	29 cf       	rjmp	.-430    	; 0x350 <changeMenu+0x86>
	{
		JoyStickPressed = 1; // JoyStickStatus auf "wurde gedrückt" ändern
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <JoyStickPressed.1848>
 504:	12 c0       	rjmp	.+36     	; 0x52a <__stack+0xcb>
		}
		refreshDisplay();
	}
	
	// Wird JoyStick gedrückt?
	if(JoyZPos != 0 && JoyStickPressed == 0)
 506:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <JoyStickPressed.1848>
 50a:	81 11       	cpse	r24, r1
 50c:	21 cf       	rjmp	.-446    	; 0x350 <changeMenu+0x86>
 50e:	f7 cf       	rjmp	.-18     	; 0x4fe <__stack+0x9f>
		{
			MovedUp = 0;
		}
		if(joyStickPosition != UNTEN)
		{
			MovedDown = 0;
 510:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__data_end>
		}
		
		if(MovedRight != 1 && MovedLeft != 1)
 514:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <MovedRight.1845>
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	09 f0       	breq	.+2      	; 0x51e <__stack+0xbf>
 51c:	77 cf       	rjmp	.-274    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 51e:	c6 cf       	rjmp	.-116    	; 0x4ac <__stack+0x4d>
 520:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <MovedLeft.1844>
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	11 f6       	brne	.-124    	; 0x4ac <__stack+0x4d>
 528:	bf cf       	rjmp	.-130    	; 0x4a8 <__stack+0x49>
		{
			MovedLeft = 0;
		}
		refreshDisplay();
	}
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <getZustand>:

unsigned char getZustand(unsigned char Auswahl, unsigned char Zeile)
{
	return listZustaende[Auswahl][Zeile];
 530:	e8 2f       	mov	r30, r24
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	ee 0f       	add	r30, r30
 536:	ff 1f       	adc	r31, r31
 538:	e8 54       	subi	r30, 0x48	; 72
 53a:	ff 4f       	sbci	r31, 0xFF	; 255
 53c:	e6 0f       	add	r30, r22
 53e:	f1 1d       	adc	r31, r1
}
 540:	80 81       	ld	r24, Z
 542:	08 95       	ret

00000544 <getZeilenAnzahl>:
unsigned char getZeilenAnzahl(unsigned char Auswahl)
{
	return anzahlZeilen[Auswahl];
 544:	e8 2f       	mov	r30, r24
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	e4 55       	subi	r30, 0x54	; 84
 54a:	ff 4f       	sbci	r31, 0xFF	; 255
}
 54c:	80 81       	ld	r24, Z
 54e:	08 95       	ret

00000550 <refreshLEDStatusTest3>:


// Test-Programm fÃ¼r Ansteuerung aller LEDs (Test 3)
// auskommetieren fÃ¼r Test3
void refreshLEDStatusTest3()
{
 550:	ef 92       	push	r14
 552:	ff 92       	push	r15
 554:	0f 93       	push	r16
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	e1 2c       	mov	r14, r1
	unsigned char ledcount = 0;
 55e:	f1 2c       	mov	r15, r1
			{
				PORTC &= ~(1<<ledcount);
			}
			else if (getZustand(i, j) == 1)
			{
				PORTC |= (1<<ledcount);
 560:	01 e0       	ldi	r16, 0x01	; 1
 562:	10 e0       	ldi	r17, 0x00	; 0
 564:	30 c0       	rjmp	.+96     	; 0x5c6 <refreshLEDStatusTest3+0x76>
	unsigned char ledcount = 0;
	for (int i = 0; i<ANZAHL_AUSWAHL; i++)
	{
		for (int j = 0; j<getZeilenAnzahl(i); j++)
		{
			if(getZustand(i,j) == 0)
 566:	6c 2f       	mov	r22, r28
 568:	8e 2d       	mov	r24, r14
 56a:	0e 94 98 02 	call	0x530	; 0x530 <getZustand>
 56e:	81 11       	cpse	r24, r1
 570:	0d c0       	rjmp	.+26     	; 0x58c <refreshLEDStatusTest3+0x3c>
			{
				PORTC &= ~(1<<ledcount);
 572:	95 b3       	in	r25, 0x15	; 21
 574:	98 01       	movw	r18, r16
 576:	0f 2c       	mov	r0, r15
 578:	02 c0       	rjmp	.+4      	; 0x57e <refreshLEDStatusTest3+0x2e>
 57a:	22 0f       	add	r18, r18
 57c:	33 1f       	adc	r19, r19
 57e:	0a 94       	dec	r0
 580:	e2 f7       	brpl	.-8      	; 0x57a <refreshLEDStatusTest3+0x2a>
 582:	82 2f       	mov	r24, r18
 584:	80 95       	com	r24
 586:	89 23       	and	r24, r25
 588:	85 bb       	out	0x15, r24	; 21
 58a:	10 c0       	rjmp	.+32     	; 0x5ac <refreshLEDStatusTest3+0x5c>
			}
			else if (getZustand(i, j) == 1)
 58c:	6c 2f       	mov	r22, r28
 58e:	8e 2d       	mov	r24, r14
 590:	0e 94 98 02 	call	0x530	; 0x530 <getZustand>
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	51 f4       	brne	.+20     	; 0x5ac <refreshLEDStatusTest3+0x5c>
			{
				PORTC |= (1<<ledcount);
 598:	25 b3       	in	r18, 0x15	; 21
 59a:	c8 01       	movw	r24, r16
 59c:	0f 2c       	mov	r0, r15
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <refreshLEDStatusTest3+0x54>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <refreshLEDStatusTest3+0x50>
 5a8:	82 2b       	or	r24, r18
 5aa:	85 bb       	out	0x15, r24	; 21
			}
			ledcount++;
 5ac:	f3 94       	inc	r15
void refreshLEDStatusTest3()
{
	unsigned char ledcount = 0;
	for (int i = 0; i<ANZAHL_AUSWAHL; i++)
	{
		for (int j = 0; j<getZeilenAnzahl(i); j++)
 5ae:	21 96       	adiw	r28, 0x01	; 1
 5b0:	8e 2d       	mov	r24, r14
 5b2:	0e 94 a2 02 	call	0x544	; 0x544 <getZeilenAnzahl>
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	c8 17       	cp	r28, r24
 5ba:	d9 07       	cpc	r29, r25
 5bc:	a4 f2       	brlt	.-88     	; 0x566 <refreshLEDStatusTest3+0x16>
 5be:	e3 94       	inc	r14
// Test-Programm fÃ¼r Ansteuerung aller LEDs (Test 3)
// auskommetieren fÃ¼r Test3
void refreshLEDStatusTest3()
{
	unsigned char ledcount = 0;
	for (int i = 0; i<ANZAHL_AUSWAHL; i++)
 5c0:	84 e0       	ldi	r24, 0x04	; 4
 5c2:	e8 16       	cp	r14, r24
 5c4:	19 f0       	breq	.+6      	; 0x5cc <refreshLEDStatusTest3+0x7c>


// Test-Programm fÃ¼r Ansteuerung aller LEDs (Test 3)
// auskommetieren fÃ¼r Test3
void refreshLEDStatusTest3()
{
 5c6:	c0 e0       	ldi	r28, 0x00	; 0
 5c8:	d0 e0       	ldi	r29, 0x00	; 0
 5ca:	f2 cf       	rjmp	.-28     	; 0x5b0 <refreshLEDStatusTest3+0x60>
				PORTC |= (1<<ledcount);
			}
			ledcount++;
		}
	}
}
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	08 95       	ret

000005da <main>:
}
*/
// Test-Programm fÃ¼r Ansteuerung aller LEDs
int main(void)
{	
	display_Init();
 5da:	0e 94 05 04 	call	0x80a	; 0x80a <display_Init>
	init_JoyADCPort();
 5de:	0e 94 49 00 	call	0x92	; 0x92 <init_JoyADCPort>
	
	DDRC=0xFF;
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
 5e6:	15 ba       	out	0x15, r1	; 21
	
    while (1) 
    {
		changeMenu();
 5e8:	0e 94 65 01 	call	0x2ca	; 0x2ca <changeMenu>
		refreshLEDStatusTest3(); // auskommetieren fÃ¼r Test3
 5ec:	0e 94 a8 02 	call	0x550	; 0x550 <refreshLEDStatusTest3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f0:	8f e5       	ldi	r24, 0x5F	; 95
 5f2:	9a ee       	ldi	r25, 0xEA	; 234
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <main+0x1a>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <main+0x20>
 5fa:	00 00       	nop
 5fc:	f5 cf       	rjmp	.-22     	; 0x5e8 <main+0xe>

000005fe <_hw_zToLCD>:
		{
			printf(" %d ",_loc_DispData[ix]);
			ix++;
		}
	}
}
 5fe:	9b b3       	in	r25, 0x1b	; 27
 600:	9f 7a       	andi	r25, 0xAF	; 175
 602:	9b bb       	out	0x1b, r25	; 27
 604:	98 b3       	in	r25, 0x18	; 24
 606:	9b 71       	andi	r25, 0x1B	; 27
 608:	98 bb       	out	0x18, r25	; 24
 60a:	84 fd       	sbrc	r24, 4
 60c:	c2 9a       	sbi	0x18, 2	; 24
 60e:	85 fd       	sbrc	r24, 5
 610:	c5 9a       	sbi	0x18, 5	; 24
 612:	86 fd       	sbrc	r24, 6
 614:	c6 9a       	sbi	0x18, 6	; 24
 616:	88 23       	and	r24, r24
 618:	0c f4       	brge	.+2      	; 0x61c <_hw_zToLCD+0x1e>
 61a:	c7 9a       	sbi	0x18, 7	; 24
 61c:	61 11       	cpse	r22, r1
 61e:	de 9a       	sbi	0x1b, 6	; 27
 620:	dc 9a       	sbi	0x1b, 4	; 27
 622:	94 e0       	ldi	r25, 0x04	; 4
 624:	9a 95       	dec	r25
 626:	f1 f7       	brne	.-4      	; 0x624 <_hw_zToLCD+0x26>
 628:	dc 98       	cbi	0x1b, 4	; 27
 62a:	94 e0       	ldi	r25, 0x04	; 4
 62c:	9a 95       	dec	r25
 62e:	f1 f7       	brne	.-4      	; 0x62c <_hw_zToLCD+0x2e>
 630:	9b b3       	in	r25, 0x1b	; 27
 632:	9f 7a       	andi	r25, 0xAF	; 175
 634:	9b bb       	out	0x1b, r25	; 27
 636:	98 b3       	in	r25, 0x18	; 24
 638:	9b 71       	andi	r25, 0x1B	; 27
 63a:	98 bb       	out	0x18, r25	; 24
 63c:	80 fd       	sbrc	r24, 0
 63e:	c2 9a       	sbi	0x18, 2	; 24
 640:	81 fd       	sbrc	r24, 1
 642:	c5 9a       	sbi	0x18, 5	; 24
 644:	82 fd       	sbrc	r24, 2
 646:	c6 9a       	sbi	0x18, 6	; 24
 648:	83 fd       	sbrc	r24, 3
 64a:	c7 9a       	sbi	0x18, 7	; 24
 64c:	61 11       	cpse	r22, r1
 64e:	de 9a       	sbi	0x1b, 6	; 27
 650:	dc 9a       	sbi	0x1b, 4	; 27
 652:	84 e0       	ldi	r24, 0x04	; 4
 654:	8a 95       	dec	r24
 656:	f1 f7       	brne	.-4      	; 0x654 <_hw_zToLCD+0x56>
 658:	dc 98       	cbi	0x1b, 4	; 27
 65a:	94 e0       	ldi	r25, 0x04	; 4
 65c:	9a 95       	dec	r25
 65e:	f1 f7       	brne	.-4      	; 0x65c <_hw_zToLCD+0x5e>
 660:	08 95       	ret

00000662 <_hw_Pos>:
 662:	91 e0       	ldi	r25, 0x01	; 1
 664:	88 30       	cpi	r24, 0x08	; 8
 666:	08 f0       	brcs	.+2      	; 0x66a <_hw_Pos+0x8>
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	99 23       	and	r25, r25
 66c:	79 f0       	breq	.+30     	; 0x68c <_hw_Pos+0x2a>
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	62 30       	cpi	r22, 0x02	; 2
 672:	08 f0       	brcs	.+2      	; 0x676 <_hw_Pos+0x14>
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	99 23       	and	r25, r25
 678:	49 f0       	breq	.+18     	; 0x68c <_hw_Pos+0x2a>
 67a:	61 11       	cpse	r22, r1
 67c:	80 5c       	subi	r24, 0xC0	; 192
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	80 68       	ori	r24, 0x80	; 128
 682:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_hw_zToLCD>
 686:	88 ec       	ldi	r24, 0xC8	; 200
 688:	8a 95       	dec	r24
 68a:	f1 f7       	brne	.-4      	; 0x688 <_hw_Pos+0x26>
 68c:	08 95       	ret

0000068e <_hw_Home>:
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	0e 94 31 03 	call	0x662	; 0x662 <_hw_Pos>
 696:	8f e6       	ldi	r24, 0x6F	; 111
 698:	97 e1       	ldi	r25, 0x17	; 23
 69a:	01 97       	sbiw	r24, 0x01	; 1
 69c:	f1 f7       	brne	.-4      	; 0x69a <_hw_Home+0xc>
 69e:	00 c0       	rjmp	.+0      	; 0x6a0 <_hw_Home+0x12>
 6a0:	00 00       	nop
 6a2:	08 95       	ret

000006a4 <_hw_Init>:
 6a4:	2f eb       	ldi	r18, 0xBF	; 191
 6a6:	84 ed       	ldi	r24, 0xD4	; 212
 6a8:	91 e0       	ldi	r25, 0x01	; 1
 6aa:	21 50       	subi	r18, 0x01	; 1
 6ac:	80 40       	sbci	r24, 0x00	; 0
 6ae:	90 40       	sbci	r25, 0x00	; 0
 6b0:	e1 f7       	brne	.-8      	; 0x6aa <_hw_Init+0x6>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <_hw_Init+0x10>
 6b4:	00 00       	nop
 6b6:	8a b3       	in	r24, 0x1a	; 26
 6b8:	80 65       	ori	r24, 0x50	; 80
 6ba:	8a bb       	out	0x1a, r24	; 26
 6bc:	87 b3       	in	r24, 0x17	; 23
 6be:	84 6e       	ori	r24, 0xE4	; 228
 6c0:	87 bb       	out	0x17, r24	; 23
 6c2:	88 b3       	in	r24, 0x18	; 24
 6c4:	8b 71       	andi	r24, 0x1B	; 27
 6c6:	88 bb       	out	0x18, r24	; 24
 6c8:	8b b3       	in	r24, 0x1b	; 27
 6ca:	8f 7a       	andi	r24, 0xAF	; 175
 6cc:	8b bb       	out	0x1b, r24	; 27
 6ce:	88 b3       	in	r24, 0x18	; 24
 6d0:	84 62       	ori	r24, 0x24	; 36
 6d2:	88 bb       	out	0x18, r24	; 24
 6d4:	dc 9a       	sbi	0x1b, 4	; 27
 6d6:	24 e0       	ldi	r18, 0x04	; 4
 6d8:	2a 95       	dec	r18
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <_hw_Init+0x34>
 6dc:	dc 98       	cbi	0x1b, 4	; 27
 6de:	80 ea       	ldi	r24, 0xA0	; 160
 6e0:	8a 95       	dec	r24
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <_hw_Init+0x3c>
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	88 e2       	ldi	r24, 0x28	; 40
 6e8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_hw_zToLCD>
 6ec:	90 ea       	ldi	r25, 0xA0	; 160
 6ee:	9a 95       	dec	r25
 6f0:	f1 f7       	brne	.-4      	; 0x6ee <_hw_Init+0x4a>
 6f2:	60 e0       	ldi	r22, 0x00	; 0
 6f4:	88 e2       	ldi	r24, 0x28	; 40
 6f6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_hw_zToLCD>
 6fa:	20 ea       	ldi	r18, 0xA0	; 160
 6fc:	2a 95       	dec	r18
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <_hw_Init+0x58>
 700:	60 e0       	ldi	r22, 0x00	; 0
 702:	8c e0       	ldi	r24, 0x0C	; 12
 704:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_hw_zToLCD>
 708:	80 ea       	ldi	r24, 0xA0	; 160
 70a:	8a 95       	dec	r24
 70c:	f1 f7       	brne	.-4      	; 0x70a <_hw_Init+0x66>
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_hw_zToLCD>
 716:	8f e6       	ldi	r24, 0x6F	; 111
 718:	97 e1       	ldi	r25, 0x17	; 23
 71a:	01 97       	sbiw	r24, 0x01	; 1
 71c:	f1 f7       	brne	.-4      	; 0x71a <_hw_Init+0x76>
 71e:	00 c0       	rjmp	.+0      	; 0x720 <_hw_Init+0x7c>
 720:	00 00       	nop
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	86 e0       	ldi	r24, 0x06	; 6
 726:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_hw_zToLCD>
 72a:	8f e6       	ldi	r24, 0x6F	; 111
 72c:	97 e1       	ldi	r25, 0x17	; 23
 72e:	01 97       	sbiw	r24, 0x01	; 1
 730:	f1 f7       	brne	.-4      	; 0x72e <_hw_Init+0x8a>
 732:	00 c0       	rjmp	.+0      	; 0x734 <_hw_Init+0x90>
 734:	00 00       	nop
 736:	0e 94 47 03 	call	0x68e	; 0x68e <_hw_Home>
 73a:	08 95       	ret

0000073c <_hw_CharToDisplay>:
 73c:	61 e0       	ldi	r22, 0x01	; 1
 73e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_hw_zToLCD>
 742:	88 ec       	ldi	r24, 0xC8	; 200
 744:	8a 95       	dec	r24
 746:	f1 f7       	brne	.-4      	; 0x744 <_hw_CharToDisplay+0x8>
 748:	08 95       	ret

0000074a <_loc_ClearLine>:
 74a:	82 30       	cpi	r24, 0x02	; 2
 74c:	70 f4       	brcc	.+28     	; 0x76a <_loc_ClearLine+0x20>
 74e:	88 0f       	add	r24, r24
 750:	88 0f       	add	r24, r24
 752:	88 0f       	add	r24, r24
 754:	28 e0       	ldi	r18, 0x08	; 8
 756:	28 0f       	add	r18, r24
 758:	90 e2       	ldi	r25, 0x20	; 32
 75a:	e8 2f       	mov	r30, r24
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	ed 53       	subi	r30, 0x3D	; 61
 760:	ff 4f       	sbci	r31, 0xFF	; 255
 762:	90 83       	st	Z, r25
 764:	8f 5f       	subi	r24, 0xFF	; 255
 766:	28 13       	cpse	r18, r24
 768:	f8 cf       	rjmp	.-16     	; 0x75a <_loc_ClearLine+0x10>
 76a:	08 95       	ret

0000076c <_loc_Refresh>:
 76c:	0f 93       	push	r16
 76e:	1f 93       	push	r17
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	0e 94 31 03 	call	0x662	; 0x662 <_hw_Pos>
 77c:	c3 ec       	ldi	r28, 0xC3	; 195
 77e:	d0 e0       	ldi	r29, 0x00	; 0
 780:	0b ec       	ldi	r16, 0xCB	; 203
 782:	10 e0       	ldi	r17, 0x00	; 0
 784:	89 91       	ld	r24, Y+
 786:	0e 94 9e 03 	call	0x73c	; 0x73c <_hw_CharToDisplay>
 78a:	c0 17       	cp	r28, r16
 78c:	d1 07       	cpc	r29, r17
 78e:	d1 f7       	brne	.-12     	; 0x784 <_loc_Refresh+0x18>
 790:	61 e0       	ldi	r22, 0x01	; 1
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	0e 94 31 03 	call	0x662	; 0x662 <_hw_Pos>
 798:	c8 e0       	ldi	r28, 0x08	; 8
 79a:	ec 2f       	mov	r30, r28
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	ed 53       	subi	r30, 0x3D	; 61
 7a0:	ff 4f       	sbci	r31, 0xFF	; 255
 7a2:	80 81       	ld	r24, Z
 7a4:	0e 94 9e 03 	call	0x73c	; 0x73c <_hw_CharToDisplay>
 7a8:	cf 5f       	subi	r28, 0xFF	; 255
 7aa:	c0 31       	cpi	r28, 0x10	; 16
 7ac:	b1 f7       	brne	.-20     	; 0x79a <_loc_Refresh+0x2e>
 7ae:	60 91 c0 00 	lds	r22, 0x00C0	; 0x8000c0 <_loc_Y>
 7b2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <_loc_X>
 7b6:	0e 94 31 03 	call	0x662	; 0x662 <_hw_Pos>
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	1f 91       	pop	r17
 7c0:	0f 91       	pop	r16
 7c2:	08 95       	ret

000007c4 <_loc_ScrollUp>:
 7c4:	e3 ec       	ldi	r30, 0xC3	; 195
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	2b ec       	ldi	r18, 0xCB	; 203
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	80 85       	ldd	r24, Z+8	; 0x08
 7ce:	81 93       	st	Z+, r24
 7d0:	e2 17       	cp	r30, r18
 7d2:	f3 07       	cpc	r31, r19
 7d4:	d9 f7       	brne	.-10     	; 0x7cc <_loc_ScrollUp+0x8>
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	0e 94 a5 03 	call	0x74a	; 0x74a <_loc_ClearLine>
 7dc:	0e 94 b6 03 	call	0x76c	; 0x76c <_loc_Refresh>
 7e0:	08 95       	ret

000007e2 <display_Home>:

// Den Cursor an die Position (0,0) verschieben
void display_Home(void)
{
	// Aufruf der Low-Level Funktion
	_hw_Home();
 7e2:	0e 94 47 03 	call	0x68e	; 0x68e <_hw_Home>
	
	// Die Datenpointer richtig setzen
	_loc_X=0;
 7e6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <_loc_X>
	_loc_Y=0;
 7ea:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <_loc_Y>
	_loc_Ix=0;
 7ee:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <_loc_Ix>
 7f2:	08 95       	ret

000007f4 <display_Clear>:
	uint8_t Cnt;
	
	// Alle Zeilen mit Spaces füllen
	for(Cnt=0;Cnt<DISP_LINES;Cnt++)
	{
		_loc_ClearLine(Cnt);
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	0e 94 a5 03 	call	0x74a	; 0x74a <_loc_ClearLine>
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	0e 94 a5 03 	call	0x74a	; 0x74a <_loc_ClearLine>
	}

	// Den Memory Inhalt ausgeben
	_loc_Refresh();
 800:	0e 94 b6 03 	call	0x76c	; 0x76c <_loc_Refresh>

	// zuletzt wird der Cursor auf Anfang gesetzt
	display_Home();
 804:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <display_Home>
 808:	08 95       	ret

0000080a <display_Init>:
void display_Init(void)
{
	uint8_t Cnt;

	// Intitialisieren des Controllers	
	_hw_Init();
 80a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_hw_Init>
	
	// Initialisieren der internen Variablen und des internen Memories
	for(Cnt=0;Cnt<DISP_LINES;Cnt++)
	{
		_loc_ClearLine(Cnt);
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	0e 94 a5 03 	call	0x74a	; 0x74a <_loc_ClearLine>
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	0e 94 a5 03 	call	0x74a	; 0x74a <_loc_ClearLine>
	}
	
	_loc_X=0;
 81a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <_loc_X>
	_loc_Y=0;
 81e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <_loc_Y>
	_loc_Ix=0;
 822:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <_loc_Ix>
	
	
	// Konfigurieren des stdout Kanals
#ifdef STDOUT_DISP	
	display_Clear();
 826:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <display_Clear>
	stdout = &disp_str;	
 82a:	88 e8       	ldi	r24, 0x88	; 136
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <__iob+0x3>
 832:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__iob+0x2>
 836:	08 95       	ret

00000838 <display_Pos>:
// Den Cursor an eine beliebige Position im Display verschieben
// Bei Überschreiten der Limite bleibt der Cursor unverändert
// X-Position von links nach rechts, y-Position von oben nach unten
// Zähler beginnt bei 0
void display_Pos(unsigned char x, unsigned char y)
{
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
	if((x<DISP_COLS)&&(y<DISP_LINES))
 83c:	88 30       	cpi	r24, 0x08	; 8
 83e:	88 f4       	brcc	.+34     	; 0x862 <display_Pos+0x2a>
 840:	62 30       	cpi	r22, 0x02	; 2
 842:	78 f4       	brcc	.+30     	; 0x862 <display_Pos+0x2a>
 844:	d6 2f       	mov	r29, r22
 846:	c8 2f       	mov	r28, r24
	{
		// Aufruf der Low-Level Funktion
		_hw_Pos(x,y);
 848:	0e 94 31 03 	call	0x662	; 0x662 <_hw_Pos>
		
		// Update der Datenpointer
		_loc_Y=y;
 84c:	d0 93 c0 00 	sts	0x00C0, r29	; 0x8000c0 <_loc_Y>
		_loc_X=x;
 850:	c0 93 c1 00 	sts	0x00C1, r28	; 0x8000c1 <_loc_X>
		_loc_Ix=y*DISP_COLS+x;
 854:	8d 2f       	mov	r24, r29
 856:	88 0f       	add	r24, r24
 858:	88 0f       	add	r24, r24
 85a:	88 0f       	add	r24, r24
 85c:	8c 0f       	add	r24, r28
 85e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <_loc_Ix>
		
	}
	
}
 862:	df 91       	pop	r29
 864:	cf 91       	pop	r28
 866:	08 95       	ret

00000868 <display_CharToDisplay>:
// Das Zeichen im Speicher eintragen
// Wenn nötig, scrollen
// Am Ende zeigen Pointer und HW-Pos auf das nächste freie Zeichen, d.h.
// Die Inkrementierung und Prüfung erfolgt am Ende
void display_CharToDisplay (uint8_t c)
{
 868:	cf 93       	push	r28
 86a:	c8 2f       	mov	r28, r24
	
	switch (c)
 86c:	8a 30       	cpi	r24, 0x0A	; 10
 86e:	89 f0       	breq	.+34     	; 0x892 <display_CharToDisplay+0x2a>
 870:	8d 30       	cpi	r24, 0x0D	; 13
 872:	91 f5       	brne	.+100    	; 0x8d8 <display_CharToDisplay+0x70>
	{
		case ASCII_CR:
			// Den Cursor auf den aktuellen Zeilenanfang verschieben ohne
			// Zeilenvorschub
			_loc_Ix-=_loc_X;
 874:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <_loc_Ix>
 878:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <_loc_X>
 87c:	89 1b       	sub	r24, r25
 87e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <_loc_Ix>
			_loc_X=0;
 882:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <_loc_X>
			_hw_Pos(_loc_X,_loc_Y);
 886:	60 91 c0 00 	lds	r22, 0x00C0	; 0x8000c0 <_loc_Y>
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	0e 94 31 03 	call	0x662	; 0x662 <_hw_Pos>
		break;
 890:	50 c0       	rjmp	.+160    	; 0x932 <display_CharToDisplay+0xca>
		
		case ASCII_LF:
			// Den Cursor an den Beginn der nächsten Zeile verschieben
			_loc_Y++;
 892:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <_loc_Y>
 896:	8f 5f       	subi	r24, 0xFF	; 255
 898:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <_loc_Y>
			
			// Display-Ende erreicht ?
			if (_loc_Y>=DISP_LINES)
 89c:	82 30       	cpi	r24, 0x02	; 2
 89e:	58 f0       	brcs	.+22     	; 0x8b6 <display_CharToDisplay+0x4e>
			{
				_loc_ScrollUp();
 8a0:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_loc_ScrollUp>
				_loc_X=0;
 8a4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <_loc_X>
				_loc_Y=DISP_LINES-1;
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <_loc_Y>
				_loc_Ix=DISP_LEN-DISP_COLS;
 8ae:	88 e0       	ldi	r24, 0x08	; 8
 8b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <_loc_Ix>
 8b4:	0a c0       	rjmp	.+20     	; 0x8ca <display_CharToDisplay+0x62>
			}
			else
			{
				_loc_Ix=(_loc_Ix+DISP_COLS)-_loc_X;
 8b6:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <_loc_Ix>
 8ba:	88 5f       	subi	r24, 0xF8	; 248
 8bc:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <_loc_X>
 8c0:	89 1b       	sub	r24, r25
 8c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <_loc_Ix>
				_loc_X=0;
 8c6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <_loc_X>
			}
			_hw_Pos(_loc_X,_loc_Y);
 8ca:	60 91 c0 00 	lds	r22, 0x00C0	; 0x8000c0 <_loc_Y>
 8ce:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <_loc_X>
 8d2:	0e 94 31 03 	call	0x662	; 0x662 <_hw_Pos>
		break;
 8d6:	2d c0       	rjmp	.+90     	; 0x932 <display_CharToDisplay+0xca>
			// Die Prüfung der Pointer und das Scrollen wird erst ausgeführt,
			// wenn das nächste Zeichen ausgegeben werden soll. Damit wird verhindert,
			// dass beim letzten Zeichen bereits die Zeile nach oben verschwindet.
			
			// Zeilenende erreicht ?
			if (_loc_X>=DISP_COLS)
 8d8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <_loc_X>
 8dc:	88 30       	cpi	r24, 0x08	; 8
 8de:	b8 f0       	brcs	.+46     	; 0x90e <display_CharToDisplay+0xa6>
			{
				_loc_Y++;
 8e0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <_loc_Y>
 8e4:	8f 5f       	subi	r24, 0xFF	; 255
 8e6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <_loc_Y>
				_loc_X=0;
 8ea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <_loc_X>
				
				// Display-Ende erreicht ?
				if (_loc_Y>=DISP_LINES)
 8ee:	82 30       	cpi	r24, 0x02	; 2
 8f0:	40 f0       	brcs	.+16     	; 0x902 <display_CharToDisplay+0x9a>
				{
					_loc_ScrollUp();
 8f2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_loc_ScrollUp>
					_loc_Y=DISP_LINES-1;
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <_loc_Y>
					_loc_Ix=DISP_LEN-DISP_COLS;
 8fc:	88 e0       	ldi	r24, 0x08	; 8
 8fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <_loc_Ix>
				}
				_hw_Pos(_loc_X,_loc_Y);
 902:	60 91 c0 00 	lds	r22, 0x00C0	; 0x8000c0 <_loc_Y>
 906:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <_loc_X>
 90a:	0e 94 31 03 	call	0x662	; 0x662 <_hw_Pos>
			}
			
			// Jetzt erfolgt die Ausgabe des Zeichens und die Speicherung im internen Mem
			_hw_CharToDisplay(c);
 90e:	8c 2f       	mov	r24, r28
 910:	0e 94 9e 03 	call	0x73c	; 0x73c <_hw_CharToDisplay>
			_loc_DispData[_loc_Ix]=c;			
 914:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <_loc_Ix>
 918:	e8 2f       	mov	r30, r24
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	ed 53       	subi	r30, 0x3D	; 61
 91e:	ff 4f       	sbci	r31, 0xFF	; 255
 920:	c0 83       	st	Z, r28
	
			// Inkremetieren der Pointer, danach werden die Werte geprüft
			_loc_X++;
 922:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <_loc_X>
 926:	9f 5f       	subi	r25, 0xFF	; 255
 928:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <_loc_X>
			_loc_Ix++;
 92c:	8f 5f       	subi	r24, 0xFF	; 255
 92e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <_loc_Ix>
	}
	
	//_loc_PrintDispData();
	// AM Ende der Funktion sind die Pointer aktuell aber noch nicht geprüft
	
}
 932:	cf 91       	pop	r28
 934:	08 95       	ret

00000936 <_disp_put>:

// Wrapper für die callbackfunktion zur AUsgabe eines Zeichens auf dem Display
// Damit werden Compiler-Warnungen vermieden.
int	_disp_put(char c, FILE * f)
{
	display_CharToDisplay(c);
 936:	0e 94 34 04 	call	0x868	; 0x868 <display_CharToDisplay>
	return 0;
}
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	08 95       	ret

00000940 <__udivmodhi4>:
 940:	aa 1b       	sub	r26, r26
 942:	bb 1b       	sub	r27, r27
 944:	51 e1       	ldi	r21, 0x11	; 17
 946:	07 c0       	rjmp	.+14     	; 0x956 <__udivmodhi4_ep>

00000948 <__udivmodhi4_loop>:
 948:	aa 1f       	adc	r26, r26
 94a:	bb 1f       	adc	r27, r27
 94c:	a6 17       	cp	r26, r22
 94e:	b7 07       	cpc	r27, r23
 950:	10 f0       	brcs	.+4      	; 0x956 <__udivmodhi4_ep>
 952:	a6 1b       	sub	r26, r22
 954:	b7 0b       	sbc	r27, r23

00000956 <__udivmodhi4_ep>:
 956:	88 1f       	adc	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	5a 95       	dec	r21
 95c:	a9 f7       	brne	.-22     	; 0x948 <__udivmodhi4_loop>
 95e:	80 95       	com	r24
 960:	90 95       	com	r25
 962:	bc 01       	movw	r22, r24
 964:	cd 01       	movw	r24, r26
 966:	08 95       	ret

00000968 <printf>:
 968:	a0 e0       	ldi	r26, 0x00	; 0
 96a:	b0 e0       	ldi	r27, 0x00	; 0
 96c:	ea eb       	ldi	r30, 0xBA	; 186
 96e:	f4 e0       	ldi	r31, 0x04	; 4
 970:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__prologue_saves__+0x20>
 974:	ae 01       	movw	r20, r28
 976:	4b 5f       	subi	r20, 0xFB	; 251
 978:	5f 4f       	sbci	r21, 0xFF	; 255
 97a:	fa 01       	movw	r30, r20
 97c:	61 91       	ld	r22, Z+
 97e:	71 91       	ld	r23, Z+
 980:	af 01       	movw	r20, r30
 982:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <__iob+0x2>
 986:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <__iob+0x3>
 98a:	0e 94 ca 04 	call	0x994	; 0x994 <vfprintf>
 98e:	e2 e0       	ldi	r30, 0x02	; 2
 990:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__epilogue_restores__+0x20>

00000994 <vfprintf>:
 994:	ab e0       	ldi	r26, 0x0B	; 11
 996:	b0 e0       	ldi	r27, 0x00	; 0
 998:	e0 ed       	ldi	r30, 0xD0	; 208
 99a:	f4 e0       	ldi	r31, 0x04	; 4
 99c:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__prologue_saves__>
 9a0:	6c 01       	movw	r12, r24
 9a2:	7b 01       	movw	r14, r22
 9a4:	8a 01       	movw	r16, r20
 9a6:	fc 01       	movw	r30, r24
 9a8:	17 82       	std	Z+7, r1	; 0x07
 9aa:	16 82       	std	Z+6, r1	; 0x06
 9ac:	83 81       	ldd	r24, Z+3	; 0x03
 9ae:	81 ff       	sbrs	r24, 1
 9b0:	cc c1       	rjmp	.+920    	; 0xd4a <vfprintf+0x3b6>
 9b2:	ce 01       	movw	r24, r28
 9b4:	01 96       	adiw	r24, 0x01	; 1
 9b6:	3c 01       	movw	r6, r24
 9b8:	f6 01       	movw	r30, r12
 9ba:	93 81       	ldd	r25, Z+3	; 0x03
 9bc:	f7 01       	movw	r30, r14
 9be:	93 fd       	sbrc	r25, 3
 9c0:	85 91       	lpm	r24, Z+
 9c2:	93 ff       	sbrs	r25, 3
 9c4:	81 91       	ld	r24, Z+
 9c6:	7f 01       	movw	r14, r30
 9c8:	88 23       	and	r24, r24
 9ca:	09 f4       	brne	.+2      	; 0x9ce <vfprintf+0x3a>
 9cc:	ba c1       	rjmp	.+884    	; 0xd42 <vfprintf+0x3ae>
 9ce:	85 32       	cpi	r24, 0x25	; 37
 9d0:	39 f4       	brne	.+14     	; 0x9e0 <vfprintf+0x4c>
 9d2:	93 fd       	sbrc	r25, 3
 9d4:	85 91       	lpm	r24, Z+
 9d6:	93 ff       	sbrs	r25, 3
 9d8:	81 91       	ld	r24, Z+
 9da:	7f 01       	movw	r14, r30
 9dc:	85 32       	cpi	r24, 0x25	; 37
 9de:	29 f4       	brne	.+10     	; 0x9ea <vfprintf+0x56>
 9e0:	b6 01       	movw	r22, r12
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 c1 06 	call	0xd82	; 0xd82 <fputc>
 9e8:	e7 cf       	rjmp	.-50     	; 0x9b8 <vfprintf+0x24>
 9ea:	91 2c       	mov	r9, r1
 9ec:	21 2c       	mov	r2, r1
 9ee:	31 2c       	mov	r3, r1
 9f0:	ff e1       	ldi	r31, 0x1F	; 31
 9f2:	f3 15       	cp	r31, r3
 9f4:	d8 f0       	brcs	.+54     	; 0xa2c <vfprintf+0x98>
 9f6:	8b 32       	cpi	r24, 0x2B	; 43
 9f8:	79 f0       	breq	.+30     	; 0xa18 <vfprintf+0x84>
 9fa:	38 f4       	brcc	.+14     	; 0xa0a <vfprintf+0x76>
 9fc:	80 32       	cpi	r24, 0x20	; 32
 9fe:	79 f0       	breq	.+30     	; 0xa1e <vfprintf+0x8a>
 a00:	83 32       	cpi	r24, 0x23	; 35
 a02:	a1 f4       	brne	.+40     	; 0xa2c <vfprintf+0x98>
 a04:	23 2d       	mov	r18, r3
 a06:	20 61       	ori	r18, 0x10	; 16
 a08:	1d c0       	rjmp	.+58     	; 0xa44 <vfprintf+0xb0>
 a0a:	8d 32       	cpi	r24, 0x2D	; 45
 a0c:	61 f0       	breq	.+24     	; 0xa26 <vfprintf+0x92>
 a0e:	80 33       	cpi	r24, 0x30	; 48
 a10:	69 f4       	brne	.+26     	; 0xa2c <vfprintf+0x98>
 a12:	23 2d       	mov	r18, r3
 a14:	21 60       	ori	r18, 0x01	; 1
 a16:	16 c0       	rjmp	.+44     	; 0xa44 <vfprintf+0xb0>
 a18:	83 2d       	mov	r24, r3
 a1a:	82 60       	ori	r24, 0x02	; 2
 a1c:	38 2e       	mov	r3, r24
 a1e:	e3 2d       	mov	r30, r3
 a20:	e4 60       	ori	r30, 0x04	; 4
 a22:	3e 2e       	mov	r3, r30
 a24:	2a c0       	rjmp	.+84     	; 0xa7a <vfprintf+0xe6>
 a26:	f3 2d       	mov	r31, r3
 a28:	f8 60       	ori	r31, 0x08	; 8
 a2a:	1d c0       	rjmp	.+58     	; 0xa66 <vfprintf+0xd2>
 a2c:	37 fc       	sbrc	r3, 7
 a2e:	2d c0       	rjmp	.+90     	; 0xa8a <vfprintf+0xf6>
 a30:	20 ed       	ldi	r18, 0xD0	; 208
 a32:	28 0f       	add	r18, r24
 a34:	2a 30       	cpi	r18, 0x0A	; 10
 a36:	40 f0       	brcs	.+16     	; 0xa48 <vfprintf+0xb4>
 a38:	8e 32       	cpi	r24, 0x2E	; 46
 a3a:	b9 f4       	brne	.+46     	; 0xa6a <vfprintf+0xd6>
 a3c:	36 fc       	sbrc	r3, 6
 a3e:	81 c1       	rjmp	.+770    	; 0xd42 <vfprintf+0x3ae>
 a40:	23 2d       	mov	r18, r3
 a42:	20 64       	ori	r18, 0x40	; 64
 a44:	32 2e       	mov	r3, r18
 a46:	19 c0       	rjmp	.+50     	; 0xa7a <vfprintf+0xe6>
 a48:	36 fe       	sbrs	r3, 6
 a4a:	06 c0       	rjmp	.+12     	; 0xa58 <vfprintf+0xc4>
 a4c:	8a e0       	ldi	r24, 0x0A	; 10
 a4e:	98 9e       	mul	r9, r24
 a50:	20 0d       	add	r18, r0
 a52:	11 24       	eor	r1, r1
 a54:	92 2e       	mov	r9, r18
 a56:	11 c0       	rjmp	.+34     	; 0xa7a <vfprintf+0xe6>
 a58:	ea e0       	ldi	r30, 0x0A	; 10
 a5a:	2e 9e       	mul	r2, r30
 a5c:	20 0d       	add	r18, r0
 a5e:	11 24       	eor	r1, r1
 a60:	22 2e       	mov	r2, r18
 a62:	f3 2d       	mov	r31, r3
 a64:	f0 62       	ori	r31, 0x20	; 32
 a66:	3f 2e       	mov	r3, r31
 a68:	08 c0       	rjmp	.+16     	; 0xa7a <vfprintf+0xe6>
 a6a:	8c 36       	cpi	r24, 0x6C	; 108
 a6c:	21 f4       	brne	.+8      	; 0xa76 <vfprintf+0xe2>
 a6e:	83 2d       	mov	r24, r3
 a70:	80 68       	ori	r24, 0x80	; 128
 a72:	38 2e       	mov	r3, r24
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <vfprintf+0xe6>
 a76:	88 36       	cpi	r24, 0x68	; 104
 a78:	41 f4       	brne	.+16     	; 0xa8a <vfprintf+0xf6>
 a7a:	f7 01       	movw	r30, r14
 a7c:	93 fd       	sbrc	r25, 3
 a7e:	85 91       	lpm	r24, Z+
 a80:	93 ff       	sbrs	r25, 3
 a82:	81 91       	ld	r24, Z+
 a84:	7f 01       	movw	r14, r30
 a86:	81 11       	cpse	r24, r1
 a88:	b3 cf       	rjmp	.-154    	; 0x9f0 <vfprintf+0x5c>
 a8a:	98 2f       	mov	r25, r24
 a8c:	9f 7d       	andi	r25, 0xDF	; 223
 a8e:	95 54       	subi	r25, 0x45	; 69
 a90:	93 30       	cpi	r25, 0x03	; 3
 a92:	28 f4       	brcc	.+10     	; 0xa9e <vfprintf+0x10a>
 a94:	0c 5f       	subi	r16, 0xFC	; 252
 a96:	1f 4f       	sbci	r17, 0xFF	; 255
 a98:	9f e3       	ldi	r25, 0x3F	; 63
 a9a:	99 83       	std	Y+1, r25	; 0x01
 a9c:	0d c0       	rjmp	.+26     	; 0xab8 <vfprintf+0x124>
 a9e:	83 36       	cpi	r24, 0x63	; 99
 aa0:	31 f0       	breq	.+12     	; 0xaae <vfprintf+0x11a>
 aa2:	83 37       	cpi	r24, 0x73	; 115
 aa4:	71 f0       	breq	.+28     	; 0xac2 <vfprintf+0x12e>
 aa6:	83 35       	cpi	r24, 0x53	; 83
 aa8:	09 f0       	breq	.+2      	; 0xaac <vfprintf+0x118>
 aaa:	59 c0       	rjmp	.+178    	; 0xb5e <vfprintf+0x1ca>
 aac:	21 c0       	rjmp	.+66     	; 0xaf0 <vfprintf+0x15c>
 aae:	f8 01       	movw	r30, r16
 ab0:	80 81       	ld	r24, Z
 ab2:	89 83       	std	Y+1, r24	; 0x01
 ab4:	0e 5f       	subi	r16, 0xFE	; 254
 ab6:	1f 4f       	sbci	r17, 0xFF	; 255
 ab8:	88 24       	eor	r8, r8
 aba:	83 94       	inc	r8
 abc:	91 2c       	mov	r9, r1
 abe:	53 01       	movw	r10, r6
 ac0:	13 c0       	rjmp	.+38     	; 0xae8 <vfprintf+0x154>
 ac2:	28 01       	movw	r4, r16
 ac4:	f2 e0       	ldi	r31, 0x02	; 2
 ac6:	4f 0e       	add	r4, r31
 ac8:	51 1c       	adc	r5, r1
 aca:	f8 01       	movw	r30, r16
 acc:	a0 80       	ld	r10, Z
 ace:	b1 80       	ldd	r11, Z+1	; 0x01
 ad0:	36 fe       	sbrs	r3, 6
 ad2:	03 c0       	rjmp	.+6      	; 0xada <vfprintf+0x146>
 ad4:	69 2d       	mov	r22, r9
 ad6:	70 e0       	ldi	r23, 0x00	; 0
 ad8:	02 c0       	rjmp	.+4      	; 0xade <vfprintf+0x14a>
 ada:	6f ef       	ldi	r22, 0xFF	; 255
 adc:	7f ef       	ldi	r23, 0xFF	; 255
 ade:	c5 01       	movw	r24, r10
 ae0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <strnlen>
 ae4:	4c 01       	movw	r8, r24
 ae6:	82 01       	movw	r16, r4
 ae8:	f3 2d       	mov	r31, r3
 aea:	ff 77       	andi	r31, 0x7F	; 127
 aec:	3f 2e       	mov	r3, r31
 aee:	16 c0       	rjmp	.+44     	; 0xb1c <vfprintf+0x188>
 af0:	28 01       	movw	r4, r16
 af2:	22 e0       	ldi	r18, 0x02	; 2
 af4:	42 0e       	add	r4, r18
 af6:	51 1c       	adc	r5, r1
 af8:	f8 01       	movw	r30, r16
 afa:	a0 80       	ld	r10, Z
 afc:	b1 80       	ldd	r11, Z+1	; 0x01
 afe:	36 fe       	sbrs	r3, 6
 b00:	03 c0       	rjmp	.+6      	; 0xb08 <vfprintf+0x174>
 b02:	69 2d       	mov	r22, r9
 b04:	70 e0       	ldi	r23, 0x00	; 0
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <vfprintf+0x178>
 b08:	6f ef       	ldi	r22, 0xFF	; 255
 b0a:	7f ef       	ldi	r23, 0xFF	; 255
 b0c:	c5 01       	movw	r24, r10
 b0e:	0e 94 ab 06 	call	0xd56	; 0xd56 <strnlen_P>
 b12:	4c 01       	movw	r8, r24
 b14:	f3 2d       	mov	r31, r3
 b16:	f0 68       	ori	r31, 0x80	; 128
 b18:	3f 2e       	mov	r3, r31
 b1a:	82 01       	movw	r16, r4
 b1c:	33 fc       	sbrc	r3, 3
 b1e:	1b c0       	rjmp	.+54     	; 0xb56 <vfprintf+0x1c2>
 b20:	82 2d       	mov	r24, r2
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	88 16       	cp	r8, r24
 b26:	99 06       	cpc	r9, r25
 b28:	b0 f4       	brcc	.+44     	; 0xb56 <vfprintf+0x1c2>
 b2a:	b6 01       	movw	r22, r12
 b2c:	80 e2       	ldi	r24, 0x20	; 32
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	0e 94 c1 06 	call	0xd82	; 0xd82 <fputc>
 b34:	2a 94       	dec	r2
 b36:	f4 cf       	rjmp	.-24     	; 0xb20 <vfprintf+0x18c>
 b38:	f5 01       	movw	r30, r10
 b3a:	37 fc       	sbrc	r3, 7
 b3c:	85 91       	lpm	r24, Z+
 b3e:	37 fe       	sbrs	r3, 7
 b40:	81 91       	ld	r24, Z+
 b42:	5f 01       	movw	r10, r30
 b44:	b6 01       	movw	r22, r12
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	0e 94 c1 06 	call	0xd82	; 0xd82 <fputc>
 b4c:	21 10       	cpse	r2, r1
 b4e:	2a 94       	dec	r2
 b50:	21 e0       	ldi	r18, 0x01	; 1
 b52:	82 1a       	sub	r8, r18
 b54:	91 08       	sbc	r9, r1
 b56:	81 14       	cp	r8, r1
 b58:	91 04       	cpc	r9, r1
 b5a:	71 f7       	brne	.-36     	; 0xb38 <vfprintf+0x1a4>
 b5c:	e8 c0       	rjmp	.+464    	; 0xd2e <vfprintf+0x39a>
 b5e:	84 36       	cpi	r24, 0x64	; 100
 b60:	11 f0       	breq	.+4      	; 0xb66 <vfprintf+0x1d2>
 b62:	89 36       	cpi	r24, 0x69	; 105
 b64:	41 f5       	brne	.+80     	; 0xbb6 <vfprintf+0x222>
 b66:	f8 01       	movw	r30, r16
 b68:	37 fe       	sbrs	r3, 7
 b6a:	07 c0       	rjmp	.+14     	; 0xb7a <vfprintf+0x1e6>
 b6c:	60 81       	ld	r22, Z
 b6e:	71 81       	ldd	r23, Z+1	; 0x01
 b70:	82 81       	ldd	r24, Z+2	; 0x02
 b72:	93 81       	ldd	r25, Z+3	; 0x03
 b74:	0c 5f       	subi	r16, 0xFC	; 252
 b76:	1f 4f       	sbci	r17, 0xFF	; 255
 b78:	08 c0       	rjmp	.+16     	; 0xb8a <vfprintf+0x1f6>
 b7a:	60 81       	ld	r22, Z
 b7c:	71 81       	ldd	r23, Z+1	; 0x01
 b7e:	07 2e       	mov	r0, r23
 b80:	00 0c       	add	r0, r0
 b82:	88 0b       	sbc	r24, r24
 b84:	99 0b       	sbc	r25, r25
 b86:	0e 5f       	subi	r16, 0xFE	; 254
 b88:	1f 4f       	sbci	r17, 0xFF	; 255
 b8a:	f3 2d       	mov	r31, r3
 b8c:	ff 76       	andi	r31, 0x6F	; 111
 b8e:	3f 2e       	mov	r3, r31
 b90:	97 ff       	sbrs	r25, 7
 b92:	09 c0       	rjmp	.+18     	; 0xba6 <vfprintf+0x212>
 b94:	90 95       	com	r25
 b96:	80 95       	com	r24
 b98:	70 95       	com	r23
 b9a:	61 95       	neg	r22
 b9c:	7f 4f       	sbci	r23, 0xFF	; 255
 b9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ba0:	9f 4f       	sbci	r25, 0xFF	; 255
 ba2:	f0 68       	ori	r31, 0x80	; 128
 ba4:	3f 2e       	mov	r3, r31
 ba6:	2a e0       	ldi	r18, 0x0A	; 10
 ba8:	30 e0       	ldi	r19, 0x00	; 0
 baa:	a3 01       	movw	r20, r6
 bac:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__ultoa_invert>
 bb0:	88 2e       	mov	r8, r24
 bb2:	86 18       	sub	r8, r6
 bb4:	45 c0       	rjmp	.+138    	; 0xc40 <vfprintf+0x2ac>
 bb6:	85 37       	cpi	r24, 0x75	; 117
 bb8:	31 f4       	brne	.+12     	; 0xbc6 <vfprintf+0x232>
 bba:	23 2d       	mov	r18, r3
 bbc:	2f 7e       	andi	r18, 0xEF	; 239
 bbe:	b2 2e       	mov	r11, r18
 bc0:	2a e0       	ldi	r18, 0x0A	; 10
 bc2:	30 e0       	ldi	r19, 0x00	; 0
 bc4:	25 c0       	rjmp	.+74     	; 0xc10 <vfprintf+0x27c>
 bc6:	93 2d       	mov	r25, r3
 bc8:	99 7f       	andi	r25, 0xF9	; 249
 bca:	b9 2e       	mov	r11, r25
 bcc:	8f 36       	cpi	r24, 0x6F	; 111
 bce:	c1 f0       	breq	.+48     	; 0xc00 <vfprintf+0x26c>
 bd0:	18 f4       	brcc	.+6      	; 0xbd8 <vfprintf+0x244>
 bd2:	88 35       	cpi	r24, 0x58	; 88
 bd4:	79 f0       	breq	.+30     	; 0xbf4 <vfprintf+0x260>
 bd6:	b5 c0       	rjmp	.+362    	; 0xd42 <vfprintf+0x3ae>
 bd8:	80 37       	cpi	r24, 0x70	; 112
 bda:	19 f0       	breq	.+6      	; 0xbe2 <vfprintf+0x24e>
 bdc:	88 37       	cpi	r24, 0x78	; 120
 bde:	21 f0       	breq	.+8      	; 0xbe8 <vfprintf+0x254>
 be0:	b0 c0       	rjmp	.+352    	; 0xd42 <vfprintf+0x3ae>
 be2:	e9 2f       	mov	r30, r25
 be4:	e0 61       	ori	r30, 0x10	; 16
 be6:	be 2e       	mov	r11, r30
 be8:	b4 fe       	sbrs	r11, 4
 bea:	0d c0       	rjmp	.+26     	; 0xc06 <vfprintf+0x272>
 bec:	fb 2d       	mov	r31, r11
 bee:	f4 60       	ori	r31, 0x04	; 4
 bf0:	bf 2e       	mov	r11, r31
 bf2:	09 c0       	rjmp	.+18     	; 0xc06 <vfprintf+0x272>
 bf4:	34 fe       	sbrs	r3, 4
 bf6:	0a c0       	rjmp	.+20     	; 0xc0c <vfprintf+0x278>
 bf8:	29 2f       	mov	r18, r25
 bfa:	26 60       	ori	r18, 0x06	; 6
 bfc:	b2 2e       	mov	r11, r18
 bfe:	06 c0       	rjmp	.+12     	; 0xc0c <vfprintf+0x278>
 c00:	28 e0       	ldi	r18, 0x08	; 8
 c02:	30 e0       	ldi	r19, 0x00	; 0
 c04:	05 c0       	rjmp	.+10     	; 0xc10 <vfprintf+0x27c>
 c06:	20 e1       	ldi	r18, 0x10	; 16
 c08:	30 e0       	ldi	r19, 0x00	; 0
 c0a:	02 c0       	rjmp	.+4      	; 0xc10 <vfprintf+0x27c>
 c0c:	20 e1       	ldi	r18, 0x10	; 16
 c0e:	32 e0       	ldi	r19, 0x02	; 2
 c10:	f8 01       	movw	r30, r16
 c12:	b7 fe       	sbrs	r11, 7
 c14:	07 c0       	rjmp	.+14     	; 0xc24 <vfprintf+0x290>
 c16:	60 81       	ld	r22, Z
 c18:	71 81       	ldd	r23, Z+1	; 0x01
 c1a:	82 81       	ldd	r24, Z+2	; 0x02
 c1c:	93 81       	ldd	r25, Z+3	; 0x03
 c1e:	0c 5f       	subi	r16, 0xFC	; 252
 c20:	1f 4f       	sbci	r17, 0xFF	; 255
 c22:	06 c0       	rjmp	.+12     	; 0xc30 <vfprintf+0x29c>
 c24:	60 81       	ld	r22, Z
 c26:	71 81       	ldd	r23, Z+1	; 0x01
 c28:	80 e0       	ldi	r24, 0x00	; 0
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	0e 5f       	subi	r16, 0xFE	; 254
 c2e:	1f 4f       	sbci	r17, 0xFF	; 255
 c30:	a3 01       	movw	r20, r6
 c32:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__ultoa_invert>
 c36:	88 2e       	mov	r8, r24
 c38:	86 18       	sub	r8, r6
 c3a:	fb 2d       	mov	r31, r11
 c3c:	ff 77       	andi	r31, 0x7F	; 127
 c3e:	3f 2e       	mov	r3, r31
 c40:	36 fe       	sbrs	r3, 6
 c42:	0d c0       	rjmp	.+26     	; 0xc5e <vfprintf+0x2ca>
 c44:	23 2d       	mov	r18, r3
 c46:	2e 7f       	andi	r18, 0xFE	; 254
 c48:	a2 2e       	mov	r10, r18
 c4a:	89 14       	cp	r8, r9
 c4c:	58 f4       	brcc	.+22     	; 0xc64 <vfprintf+0x2d0>
 c4e:	34 fe       	sbrs	r3, 4
 c50:	0b c0       	rjmp	.+22     	; 0xc68 <vfprintf+0x2d4>
 c52:	32 fc       	sbrc	r3, 2
 c54:	09 c0       	rjmp	.+18     	; 0xc68 <vfprintf+0x2d4>
 c56:	83 2d       	mov	r24, r3
 c58:	8e 7e       	andi	r24, 0xEE	; 238
 c5a:	a8 2e       	mov	r10, r24
 c5c:	05 c0       	rjmp	.+10     	; 0xc68 <vfprintf+0x2d4>
 c5e:	b8 2c       	mov	r11, r8
 c60:	a3 2c       	mov	r10, r3
 c62:	03 c0       	rjmp	.+6      	; 0xc6a <vfprintf+0x2d6>
 c64:	b8 2c       	mov	r11, r8
 c66:	01 c0       	rjmp	.+2      	; 0xc6a <vfprintf+0x2d6>
 c68:	b9 2c       	mov	r11, r9
 c6a:	a4 fe       	sbrs	r10, 4
 c6c:	0f c0       	rjmp	.+30     	; 0xc8c <vfprintf+0x2f8>
 c6e:	fe 01       	movw	r30, r28
 c70:	e8 0d       	add	r30, r8
 c72:	f1 1d       	adc	r31, r1
 c74:	80 81       	ld	r24, Z
 c76:	80 33       	cpi	r24, 0x30	; 48
 c78:	21 f4       	brne	.+8      	; 0xc82 <vfprintf+0x2ee>
 c7a:	9a 2d       	mov	r25, r10
 c7c:	99 7e       	andi	r25, 0xE9	; 233
 c7e:	a9 2e       	mov	r10, r25
 c80:	09 c0       	rjmp	.+18     	; 0xc94 <vfprintf+0x300>
 c82:	a2 fe       	sbrs	r10, 2
 c84:	06 c0       	rjmp	.+12     	; 0xc92 <vfprintf+0x2fe>
 c86:	b3 94       	inc	r11
 c88:	b3 94       	inc	r11
 c8a:	04 c0       	rjmp	.+8      	; 0xc94 <vfprintf+0x300>
 c8c:	8a 2d       	mov	r24, r10
 c8e:	86 78       	andi	r24, 0x86	; 134
 c90:	09 f0       	breq	.+2      	; 0xc94 <vfprintf+0x300>
 c92:	b3 94       	inc	r11
 c94:	a3 fc       	sbrc	r10, 3
 c96:	11 c0       	rjmp	.+34     	; 0xcba <vfprintf+0x326>
 c98:	a0 fe       	sbrs	r10, 0
 c9a:	06 c0       	rjmp	.+12     	; 0xca8 <vfprintf+0x314>
 c9c:	b2 14       	cp	r11, r2
 c9e:	88 f4       	brcc	.+34     	; 0xcc2 <vfprintf+0x32e>
 ca0:	28 0c       	add	r2, r8
 ca2:	92 2c       	mov	r9, r2
 ca4:	9b 18       	sub	r9, r11
 ca6:	0e c0       	rjmp	.+28     	; 0xcc4 <vfprintf+0x330>
 ca8:	b2 14       	cp	r11, r2
 caa:	60 f4       	brcc	.+24     	; 0xcc4 <vfprintf+0x330>
 cac:	b6 01       	movw	r22, r12
 cae:	80 e2       	ldi	r24, 0x20	; 32
 cb0:	90 e0       	ldi	r25, 0x00	; 0
 cb2:	0e 94 c1 06 	call	0xd82	; 0xd82 <fputc>
 cb6:	b3 94       	inc	r11
 cb8:	f7 cf       	rjmp	.-18     	; 0xca8 <vfprintf+0x314>
 cba:	b2 14       	cp	r11, r2
 cbc:	18 f4       	brcc	.+6      	; 0xcc4 <vfprintf+0x330>
 cbe:	2b 18       	sub	r2, r11
 cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <vfprintf+0x332>
 cc2:	98 2c       	mov	r9, r8
 cc4:	21 2c       	mov	r2, r1
 cc6:	a4 fe       	sbrs	r10, 4
 cc8:	10 c0       	rjmp	.+32     	; 0xcea <vfprintf+0x356>
 cca:	b6 01       	movw	r22, r12
 ccc:	80 e3       	ldi	r24, 0x30	; 48
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	0e 94 c1 06 	call	0xd82	; 0xd82 <fputc>
 cd4:	a2 fe       	sbrs	r10, 2
 cd6:	17 c0       	rjmp	.+46     	; 0xd06 <vfprintf+0x372>
 cd8:	a1 fc       	sbrc	r10, 1
 cda:	03 c0       	rjmp	.+6      	; 0xce2 <vfprintf+0x34e>
 cdc:	88 e7       	ldi	r24, 0x78	; 120
 cde:	90 e0       	ldi	r25, 0x00	; 0
 ce0:	02 c0       	rjmp	.+4      	; 0xce6 <vfprintf+0x352>
 ce2:	88 e5       	ldi	r24, 0x58	; 88
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	b6 01       	movw	r22, r12
 ce8:	0c c0       	rjmp	.+24     	; 0xd02 <vfprintf+0x36e>
 cea:	8a 2d       	mov	r24, r10
 cec:	86 78       	andi	r24, 0x86	; 134
 cee:	59 f0       	breq	.+22     	; 0xd06 <vfprintf+0x372>
 cf0:	a1 fe       	sbrs	r10, 1
 cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <vfprintf+0x364>
 cf4:	8b e2       	ldi	r24, 0x2B	; 43
 cf6:	01 c0       	rjmp	.+2      	; 0xcfa <vfprintf+0x366>
 cf8:	80 e2       	ldi	r24, 0x20	; 32
 cfa:	a7 fc       	sbrc	r10, 7
 cfc:	8d e2       	ldi	r24, 0x2D	; 45
 cfe:	b6 01       	movw	r22, r12
 d00:	90 e0       	ldi	r25, 0x00	; 0
 d02:	0e 94 c1 06 	call	0xd82	; 0xd82 <fputc>
 d06:	89 14       	cp	r8, r9
 d08:	38 f4       	brcc	.+14     	; 0xd18 <vfprintf+0x384>
 d0a:	b6 01       	movw	r22, r12
 d0c:	80 e3       	ldi	r24, 0x30	; 48
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	0e 94 c1 06 	call	0xd82	; 0xd82 <fputc>
 d14:	9a 94       	dec	r9
 d16:	f7 cf       	rjmp	.-18     	; 0xd06 <vfprintf+0x372>
 d18:	8a 94       	dec	r8
 d1a:	f3 01       	movw	r30, r6
 d1c:	e8 0d       	add	r30, r8
 d1e:	f1 1d       	adc	r31, r1
 d20:	80 81       	ld	r24, Z
 d22:	b6 01       	movw	r22, r12
 d24:	90 e0       	ldi	r25, 0x00	; 0
 d26:	0e 94 c1 06 	call	0xd82	; 0xd82 <fputc>
 d2a:	81 10       	cpse	r8, r1
 d2c:	f5 cf       	rjmp	.-22     	; 0xd18 <vfprintf+0x384>
 d2e:	22 20       	and	r2, r2
 d30:	09 f4       	brne	.+2      	; 0xd34 <vfprintf+0x3a0>
 d32:	42 ce       	rjmp	.-892    	; 0x9b8 <vfprintf+0x24>
 d34:	b6 01       	movw	r22, r12
 d36:	80 e2       	ldi	r24, 0x20	; 32
 d38:	90 e0       	ldi	r25, 0x00	; 0
 d3a:	0e 94 c1 06 	call	0xd82	; 0xd82 <fputc>
 d3e:	2a 94       	dec	r2
 d40:	f6 cf       	rjmp	.-20     	; 0xd2e <vfprintf+0x39a>
 d42:	f6 01       	movw	r30, r12
 d44:	86 81       	ldd	r24, Z+6	; 0x06
 d46:	97 81       	ldd	r25, Z+7	; 0x07
 d48:	02 c0       	rjmp	.+4      	; 0xd4e <vfprintf+0x3ba>
 d4a:	8f ef       	ldi	r24, 0xFF	; 255
 d4c:	9f ef       	ldi	r25, 0xFF	; 255
 d4e:	2b 96       	adiw	r28, 0x0b	; 11
 d50:	e2 e1       	ldi	r30, 0x12	; 18
 d52:	0c 94 77 07 	jmp	0xeee	; 0xeee <__epilogue_restores__>

00000d56 <strnlen_P>:
 d56:	fc 01       	movw	r30, r24
 d58:	05 90       	lpm	r0, Z+
 d5a:	61 50       	subi	r22, 0x01	; 1
 d5c:	70 40       	sbci	r23, 0x00	; 0
 d5e:	01 10       	cpse	r0, r1
 d60:	d8 f7       	brcc	.-10     	; 0xd58 <strnlen_P+0x2>
 d62:	80 95       	com	r24
 d64:	90 95       	com	r25
 d66:	8e 0f       	add	r24, r30
 d68:	9f 1f       	adc	r25, r31
 d6a:	08 95       	ret

00000d6c <strnlen>:
 d6c:	fc 01       	movw	r30, r24
 d6e:	61 50       	subi	r22, 0x01	; 1
 d70:	70 40       	sbci	r23, 0x00	; 0
 d72:	01 90       	ld	r0, Z+
 d74:	01 10       	cpse	r0, r1
 d76:	d8 f7       	brcc	.-10     	; 0xd6e <strnlen+0x2>
 d78:	80 95       	com	r24
 d7a:	90 95       	com	r25
 d7c:	8e 0f       	add	r24, r30
 d7e:	9f 1f       	adc	r25, r31
 d80:	08 95       	ret

00000d82 <fputc>:
 d82:	0f 93       	push	r16
 d84:	1f 93       	push	r17
 d86:	cf 93       	push	r28
 d88:	df 93       	push	r29
 d8a:	fb 01       	movw	r30, r22
 d8c:	23 81       	ldd	r18, Z+3	; 0x03
 d8e:	21 fd       	sbrc	r18, 1
 d90:	03 c0       	rjmp	.+6      	; 0xd98 <fputc+0x16>
 d92:	8f ef       	ldi	r24, 0xFF	; 255
 d94:	9f ef       	ldi	r25, 0xFF	; 255
 d96:	2c c0       	rjmp	.+88     	; 0xdf0 <fputc+0x6e>
 d98:	22 ff       	sbrs	r18, 2
 d9a:	16 c0       	rjmp	.+44     	; 0xdc8 <fputc+0x46>
 d9c:	46 81       	ldd	r20, Z+6	; 0x06
 d9e:	57 81       	ldd	r21, Z+7	; 0x07
 da0:	24 81       	ldd	r18, Z+4	; 0x04
 da2:	35 81       	ldd	r19, Z+5	; 0x05
 da4:	42 17       	cp	r20, r18
 da6:	53 07       	cpc	r21, r19
 da8:	44 f4       	brge	.+16     	; 0xdba <fputc+0x38>
 daa:	a0 81       	ld	r26, Z
 dac:	b1 81       	ldd	r27, Z+1	; 0x01
 dae:	9d 01       	movw	r18, r26
 db0:	2f 5f       	subi	r18, 0xFF	; 255
 db2:	3f 4f       	sbci	r19, 0xFF	; 255
 db4:	31 83       	std	Z+1, r19	; 0x01
 db6:	20 83       	st	Z, r18
 db8:	8c 93       	st	X, r24
 dba:	26 81       	ldd	r18, Z+6	; 0x06
 dbc:	37 81       	ldd	r19, Z+7	; 0x07
 dbe:	2f 5f       	subi	r18, 0xFF	; 255
 dc0:	3f 4f       	sbci	r19, 0xFF	; 255
 dc2:	37 83       	std	Z+7, r19	; 0x07
 dc4:	26 83       	std	Z+6, r18	; 0x06
 dc6:	14 c0       	rjmp	.+40     	; 0xdf0 <fputc+0x6e>
 dc8:	8b 01       	movw	r16, r22
 dca:	ec 01       	movw	r28, r24
 dcc:	fb 01       	movw	r30, r22
 dce:	00 84       	ldd	r0, Z+8	; 0x08
 dd0:	f1 85       	ldd	r31, Z+9	; 0x09
 dd2:	e0 2d       	mov	r30, r0
 dd4:	09 95       	icall
 dd6:	89 2b       	or	r24, r25
 dd8:	e1 f6       	brne	.-72     	; 0xd92 <fputc+0x10>
 dda:	d8 01       	movw	r26, r16
 ddc:	16 96       	adiw	r26, 0x06	; 6
 dde:	8d 91       	ld	r24, X+
 de0:	9c 91       	ld	r25, X
 de2:	17 97       	sbiw	r26, 0x07	; 7
 de4:	01 96       	adiw	r24, 0x01	; 1
 de6:	17 96       	adiw	r26, 0x07	; 7
 de8:	9c 93       	st	X, r25
 dea:	8e 93       	st	-X, r24
 dec:	16 97       	sbiw	r26, 0x06	; 6
 dee:	ce 01       	movw	r24, r28
 df0:	df 91       	pop	r29
 df2:	cf 91       	pop	r28
 df4:	1f 91       	pop	r17
 df6:	0f 91       	pop	r16
 df8:	08 95       	ret

00000dfa <__ultoa_invert>:
 dfa:	fa 01       	movw	r30, r20
 dfc:	aa 27       	eor	r26, r26
 dfe:	28 30       	cpi	r18, 0x08	; 8
 e00:	51 f1       	breq	.+84     	; 0xe56 <__ultoa_invert+0x5c>
 e02:	20 31       	cpi	r18, 0x10	; 16
 e04:	81 f1       	breq	.+96     	; 0xe66 <__ultoa_invert+0x6c>
 e06:	e8 94       	clt
 e08:	6f 93       	push	r22
 e0a:	6e 7f       	andi	r22, 0xFE	; 254
 e0c:	6e 5f       	subi	r22, 0xFE	; 254
 e0e:	7f 4f       	sbci	r23, 0xFF	; 255
 e10:	8f 4f       	sbci	r24, 0xFF	; 255
 e12:	9f 4f       	sbci	r25, 0xFF	; 255
 e14:	af 4f       	sbci	r26, 0xFF	; 255
 e16:	b1 e0       	ldi	r27, 0x01	; 1
 e18:	3e d0       	rcall	.+124    	; 0xe96 <__ultoa_invert+0x9c>
 e1a:	b4 e0       	ldi	r27, 0x04	; 4
 e1c:	3c d0       	rcall	.+120    	; 0xe96 <__ultoa_invert+0x9c>
 e1e:	67 0f       	add	r22, r23
 e20:	78 1f       	adc	r23, r24
 e22:	89 1f       	adc	r24, r25
 e24:	9a 1f       	adc	r25, r26
 e26:	a1 1d       	adc	r26, r1
 e28:	68 0f       	add	r22, r24
 e2a:	79 1f       	adc	r23, r25
 e2c:	8a 1f       	adc	r24, r26
 e2e:	91 1d       	adc	r25, r1
 e30:	a1 1d       	adc	r26, r1
 e32:	6a 0f       	add	r22, r26
 e34:	71 1d       	adc	r23, r1
 e36:	81 1d       	adc	r24, r1
 e38:	91 1d       	adc	r25, r1
 e3a:	a1 1d       	adc	r26, r1
 e3c:	20 d0       	rcall	.+64     	; 0xe7e <__ultoa_invert+0x84>
 e3e:	09 f4       	brne	.+2      	; 0xe42 <__ultoa_invert+0x48>
 e40:	68 94       	set
 e42:	3f 91       	pop	r19
 e44:	2a e0       	ldi	r18, 0x0A	; 10
 e46:	26 9f       	mul	r18, r22
 e48:	11 24       	eor	r1, r1
 e4a:	30 19       	sub	r19, r0
 e4c:	30 5d       	subi	r19, 0xD0	; 208
 e4e:	31 93       	st	Z+, r19
 e50:	de f6       	brtc	.-74     	; 0xe08 <__ultoa_invert+0xe>
 e52:	cf 01       	movw	r24, r30
 e54:	08 95       	ret
 e56:	46 2f       	mov	r20, r22
 e58:	47 70       	andi	r20, 0x07	; 7
 e5a:	40 5d       	subi	r20, 0xD0	; 208
 e5c:	41 93       	st	Z+, r20
 e5e:	b3 e0       	ldi	r27, 0x03	; 3
 e60:	0f d0       	rcall	.+30     	; 0xe80 <__ultoa_invert+0x86>
 e62:	c9 f7       	brne	.-14     	; 0xe56 <__ultoa_invert+0x5c>
 e64:	f6 cf       	rjmp	.-20     	; 0xe52 <__ultoa_invert+0x58>
 e66:	46 2f       	mov	r20, r22
 e68:	4f 70       	andi	r20, 0x0F	; 15
 e6a:	40 5d       	subi	r20, 0xD0	; 208
 e6c:	4a 33       	cpi	r20, 0x3A	; 58
 e6e:	18 f0       	brcs	.+6      	; 0xe76 <__ultoa_invert+0x7c>
 e70:	49 5d       	subi	r20, 0xD9	; 217
 e72:	31 fd       	sbrc	r19, 1
 e74:	40 52       	subi	r20, 0x20	; 32
 e76:	41 93       	st	Z+, r20
 e78:	02 d0       	rcall	.+4      	; 0xe7e <__ultoa_invert+0x84>
 e7a:	a9 f7       	brne	.-22     	; 0xe66 <__ultoa_invert+0x6c>
 e7c:	ea cf       	rjmp	.-44     	; 0xe52 <__ultoa_invert+0x58>
 e7e:	b4 e0       	ldi	r27, 0x04	; 4
 e80:	a6 95       	lsr	r26
 e82:	97 95       	ror	r25
 e84:	87 95       	ror	r24
 e86:	77 95       	ror	r23
 e88:	67 95       	ror	r22
 e8a:	ba 95       	dec	r27
 e8c:	c9 f7       	brne	.-14     	; 0xe80 <__ultoa_invert+0x86>
 e8e:	00 97       	sbiw	r24, 0x00	; 0
 e90:	61 05       	cpc	r22, r1
 e92:	71 05       	cpc	r23, r1
 e94:	08 95       	ret
 e96:	9b 01       	movw	r18, r22
 e98:	ac 01       	movw	r20, r24
 e9a:	0a 2e       	mov	r0, r26
 e9c:	06 94       	lsr	r0
 e9e:	57 95       	ror	r21
 ea0:	47 95       	ror	r20
 ea2:	37 95       	ror	r19
 ea4:	27 95       	ror	r18
 ea6:	ba 95       	dec	r27
 ea8:	c9 f7       	brne	.-14     	; 0xe9c <__ultoa_invert+0xa2>
 eaa:	62 0f       	add	r22, r18
 eac:	73 1f       	adc	r23, r19
 eae:	84 1f       	adc	r24, r20
 eb0:	95 1f       	adc	r25, r21
 eb2:	a0 1d       	adc	r26, r0
 eb4:	08 95       	ret

00000eb6 <__prologue_saves__>:
 eb6:	2f 92       	push	r2
 eb8:	3f 92       	push	r3
 eba:	4f 92       	push	r4
 ebc:	5f 92       	push	r5
 ebe:	6f 92       	push	r6
 ec0:	7f 92       	push	r7
 ec2:	8f 92       	push	r8
 ec4:	9f 92       	push	r9
 ec6:	af 92       	push	r10
 ec8:	bf 92       	push	r11
 eca:	cf 92       	push	r12
 ecc:	df 92       	push	r13
 ece:	ef 92       	push	r14
 ed0:	ff 92       	push	r15
 ed2:	0f 93       	push	r16
 ed4:	1f 93       	push	r17
 ed6:	cf 93       	push	r28
 ed8:	df 93       	push	r29
 eda:	cd b7       	in	r28, 0x3d	; 61
 edc:	de b7       	in	r29, 0x3e	; 62
 ede:	ca 1b       	sub	r28, r26
 ee0:	db 0b       	sbc	r29, r27
 ee2:	0f b6       	in	r0, 0x3f	; 63
 ee4:	f8 94       	cli
 ee6:	de bf       	out	0x3e, r29	; 62
 ee8:	0f be       	out	0x3f, r0	; 63
 eea:	cd bf       	out	0x3d, r28	; 61
 eec:	09 94       	ijmp

00000eee <__epilogue_restores__>:
 eee:	2a 88       	ldd	r2, Y+18	; 0x12
 ef0:	39 88       	ldd	r3, Y+17	; 0x11
 ef2:	48 88       	ldd	r4, Y+16	; 0x10
 ef4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ef6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ef8:	7d 84       	ldd	r7, Y+13	; 0x0d
 efa:	8c 84       	ldd	r8, Y+12	; 0x0c
 efc:	9b 84       	ldd	r9, Y+11	; 0x0b
 efe:	aa 84       	ldd	r10, Y+10	; 0x0a
 f00:	b9 84       	ldd	r11, Y+9	; 0x09
 f02:	c8 84       	ldd	r12, Y+8	; 0x08
 f04:	df 80       	ldd	r13, Y+7	; 0x07
 f06:	ee 80       	ldd	r14, Y+6	; 0x06
 f08:	fd 80       	ldd	r15, Y+5	; 0x05
 f0a:	0c 81       	ldd	r16, Y+4	; 0x04
 f0c:	1b 81       	ldd	r17, Y+3	; 0x03
 f0e:	aa 81       	ldd	r26, Y+2	; 0x02
 f10:	b9 81       	ldd	r27, Y+1	; 0x01
 f12:	ce 0f       	add	r28, r30
 f14:	d1 1d       	adc	r29, r1
 f16:	0f b6       	in	r0, 0x3f	; 63
 f18:	f8 94       	cli
 f1a:	de bf       	out	0x3e, r29	; 62
 f1c:	0f be       	out	0x3f, r0	; 63
 f1e:	cd bf       	out	0x3d, r28	; 61
 f20:	ed 01       	movw	r28, r26
 f22:	08 95       	ret

00000f24 <_exit>:
 f24:	f8 94       	cli

00000f26 <__stop_program>:
 f26:	ff cf       	rjmp	.-2      	; 0xf26 <__stop_program>
